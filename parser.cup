import java_cup.runtime.*;
import java.io.*;

terminal	DOT, LESSTHAN, LEFTPARENTHESIS, PLUS, PIPE, AMPERSAND, STAR, RIGHT, SEMICOLON, DASH, SLASH, COMMA, GREATER, COLON, EQUAL, TICK, DOTDOT, LT_LT, GT_GT, BOX, LEQ, STARSTAR, NE, GE, ASSIGN, ARROW, ABORT, ABS, ABSTRACT, ACCEPT, ACCESS, ALIASED, ALL, AND, ARRAY, AT, BEGIN, BODY, CASE, CONSTANT, DECLARE, DELAY, DELTA, DIGITS, DO, ELSE, ELSIF, END, ENTRY, EXCEPTION, EXIT, FOR, FUNCTION, GENERIC, GOTO, IF, IN, IS, LIMITED, LOOP, MOD, NEW, NOT, NULL, OF, OR, OTHERS, OUT, PACKAGE, PRAGMA, PRIVATE, PROCEDURE, PROTECTED, RAISE, RANGE, RECORD, REM, RENAMES, REQUEUE, RETURN, REVERSE, SELECT, SEPARATE, SUBTYPE, TAGGED, TASK, TERMINATE, THEN, TYPE, UNTIL, USE, WHEN, WHILE, WITH, XOR, IDENTIFIER, CHARLIT, CHARSTRING, NUMERICLIT;

non terminal	pragma, pragma_arg_s, pragma_arg, pragma_s, decl, object_decl, def_id_s, def_id, object_qualifier_opt, object_subtype_def, init_opt, number_decl, type_decl, discrim_part_opt, type_completion, type_def, subtype_decl, subtype_ind, constraint, decimal_digits_constraint, derived_type, range_constraint, range, enumeration_type, enum_id_s, enum_id, integer_type, range_spec, range_spec_opt, real_type, float_type, fixed_type, array_type, unconstr_array_type, constr_array_type, component_subtype_def, aliased_opt, index_s, index, iter_index_constraint, iter_discrete_range_s, discrete_range, range_constr_opt, record_type, record_def, tagged_opt, comp_list, comp_decl_s, variant_part_opt, comp_decl, discrim_part, discrim_spec_s, discrim_spec, access_opt, variant_part, variant_s, variant, choice_s, choice, discrete_with_range, access_type, prot_opt, decl_part, decl_item_s, decl_item_s1, decl_item, decl_item_or_body_s1, decl_item_or_body, body, name, mark, simple_name, compound_name, c_name_list, used_char, operator_symbol, indexed_comp, value_s, value, selected_comp, attribute, attribute_id, literal, aggregate, value_s_2, comp_assoc, expression, logical, short_circuit, relation, relational, membership, simple_expression, unary, adding, term, multiplying, factor, primary, parenthesized_primary, qualified, allocator, statement_s, statement, unlabeled, simple_stmt, compound_stmt, label, NULL_stmt, assign_stmt, if_stmt, cond_clause_s, cond_clause, cond_part, condition, else_opt, case_stmt, case_hdr, alternative_s, alternative, loop_stmt, label_opt, iteration, iter_part, reverse_opt, basic_loop, id_opt, block, block_decl, block_body, handled_stmt_s, except_handler_part_opt, exit_stmt, name_opt, when_opt, return_stmt, goto_stmt, subprog_decl, subprog_spec, designator, formal_part_opt, formal_part, param_s, param, mode, subprog_spec_is_push, subprog_body, procedure_call, pkg_decl, pkg_spec, private_part, c_id_opt, pkg_body, body_opt, private_type, limited_opt, use_clause, name_s, rename_decl, rename_unit, renames, task_decl, task_spec, task_def, task_private_opt, task_body, prot_decl, prot_spec, prot_def, prot_private_opt, prot_op_decl_s, prot_op_decl, prot_elem_decl_s, prot_elem_decl, prot_body, prot_op_body_s, prot_op_body, entry_decl_s, entry_decl, entry_body, entry_body_part, rep_spec_s, accept_stmt, accept_hdr, entry_name, delay_stmt, select_stmt, select_wait, guarded_select_alt, select_alt, delay_or_entry_alt, async_select, timed_entry_call, cond_entry_call, stmts_opt, abort_stmt, compilation, comp_unit, private_opt, context_spec, with_clause, use_clause_opt, unit, subunit, subunit_body, body_stub, exception_decl, except_handler_part, exception_handler, except_choice_s, except_choice, raise_stmt, requeue_stmt, generic_decl, generic_formal_part, generic_formal, generic_discrim_part_opt, subp_default, generic_type_def, generic_derived_type, generic_subp_inst, generic_pkg_inst, generic_inst, rep_spec, attrib_def, record_type_spec, align_opt, code_stmt, entry_call,or_select, address_spec, comp_loc_s;

precedence left STAR, SLASH, DASH, PLUS;

/*Grammar rules*/
pragma  ::= PRAGMA IDENTIFIER SEMICOLON
	| PRAGMA simple_name LEFTPARENTHESIS pragma_arg_s RIGHT SEMICOLON
	;

pragma_arg_s ::= pragma_arg
	| pragma_arg_s COMMA pragma_arg
	;

pragma_arg ::= expression
	| simple_name ARROW expression
	;

pragma_s ::=
	| pragma_s pragma
	;

decl    ::= object_decl
	| number_decl
	| type_decl
	| subtype_decl
	| subprog_decl
	| pkg_decl
	| task_decl
	| prot_decl
	| exception_decl
	| rename_decl
	| generic_decl
	| body_stub
	| error SEMICOLON
	;

object_decl ::= def_id_s COLON object_qualifier_opt object_subtype_def init_opt SEMICOLON
	;

def_id_s ::= def_id
	| def_id_s COMMA def_id
	;

def_id  ::= IDENTIFIER
	;

object_qualifier_opt ::=
	| ALIASED
	| CONSTANT
	| ALIASED CONSTANT
	;

object_subtype_def ::= subtype_ind
	| array_type
	;

init_opt ::=
	| ASSIGN expression
	;

number_decl ::= def_id_s COLON CONSTANT ASSIGN expression SEMICOLON
	;

type_decl ::= TYPE IDENTIFIER discrim_part_opt type_completion SEMICOLON
	;

discrim_part_opt ::=
	| discrim_part
	| LEFTPARENTHESIS BOX RIGHT
	;

type_completion ::=
	| IS type_def
	;

type_def ::= enumeration_type 
	| integer_type
	| real_type
	| array_type
	| record_type
	| access_type
	| derived_type
	| private_type
	;

subtype_decl ::= SUBTYPE IDENTIFIER IS subtype_ind SEMICOLON
	;

subtype_ind ::= name constraint
	| name
	;

constraint ::= range_constraint
	| decimal_digits_constraint
	;

decimal_digits_constraint ::= DIGITS expression range_constr_opt
	;

derived_type ::= NEW subtype_ind
	| NEW subtype_ind WITH PRIVATE
	| NEW subtype_ind WITH record_def
	| ABSTRACT NEW subtype_ind WITH PRIVATE
	| ABSTRACT NEW subtype_ind WITH record_def
	;

range_constraint ::= RANGE range
	;

range ::= simple_expression DOTDOT simple_expression
	| name TICK RANGE
	| name TICK RANGE LEFTPARENTHESIS expression RIGHT
	;

enumeration_type ::= LEFTPARENTHESIS enum_id_s RIGHT
;
enum_id_s ::= enum_id
	| enum_id_s COMMA enum_id
	;

enum_id ::= IDENTIFIER
	| CHARLIT
	;

integer_type ::= range_spec
	| MOD expression
	;
	

range_spec ::= range_constraint
	;

range_spec_opt ::=
	| range_spec
	;

real_type ::= float_type
	| fixed_type
	;

float_type ::= DIGITS expression range_spec_opt
	;

fixed_type ::= DELTA expression range_spec
	| DELTA expression DIGITS expression range_spec_opt
	;

array_type ::= unconstr_array_type
	| constr_array_type
	;

unconstr_array_type ::= ARRAY LEFTPARENTHESIS index_s RIGHT OF component_subtype_def
	;

constr_array_type ::= ARRAY iter_index_constraint OF component_subtype_def
	;

component_subtype_def ::= aliased_opt subtype_ind
	;

aliased_opt ::= 
	| ALIASED
	;

index_s ::= index
	| index_s COMMA index
	;

index ::= name RANGE BOX
	;

iter_index_constraint ::= LEFTPARENTHESIS iter_discrete_range_s RIGHT
	;

iter_discrete_range_s ::= discrete_range
	| iter_discrete_range_s COMMA discrete_range
	;

discrete_range ::= name range_constr_opt
	| range
	;

range_constr_opt ::=
	| range_constraint
	;

record_type ::= tagged_opt limited_opt record_def
	;

record_def ::= RECORD pragma_s comp_list END RECORD
	| NULL RECORD
	;

tagged_opt ::=
	| TAGGED
	| ABSTRACT TAGGED
	;

comp_list ::= comp_decl_s variant_part_opt
	| variant_part pragma_s
	| NULL SEMICOLON pragma_s
	;

comp_decl_s ::= comp_decl
	| comp_decl_s pragma_s comp_decl
	;

variant_part_opt ::= pragma_s
	| pragma_s variant_part pragma_s
	;

comp_decl ::= def_id_s COLON component_subtype_def init_opt SEMICOLON
	| error SEMICOLON
	;

discrim_part ::= LEFTPARENTHESIS discrim_spec_s RIGHT
	;

discrim_spec_s ::= discrim_spec
	| discrim_spec_s SEMICOLON discrim_spec
	;

discrim_spec ::= def_id_s COLON access_opt mark init_opt
	| error
	;

access_opt ::=
	| ACCESS
	;

variant_part ::= CASE simple_name IS pragma_s variant_s END CASE SEMICOLON
	;

variant_s ::= variant
	| variant_s variant
	;

variant ::= WHEN choice_s ARROW pragma_s comp_list
	;

choice_s ::= choice
	| choice_s PIPE choice
	;

choice ::= expression
	| discrete_with_range
	| OTHERS
	;

discrete_with_range ::= name range_constraint
	| range
	;

access_type ::= ACCESS subtype_ind
	| ACCESS CONSTANT subtype_ind
	| ACCESS ALL subtype_ind
	| ACCESS prot_opt PROCEDURE formal_part_opt
	| ACCESS prot_opt FUNCTION formal_part_opt RETURN mark
	;

prot_opt ::=
	| PROTECTED
	;

decl_part ::=
	| decl_item_or_body_s1
	;

decl_item_s ::= 
	| decl_item_s1
	;

decl_item_s1 ::= decl_item
	| decl_item_s1 decl_item
	;

decl_item ::= decl
	| use_clause
	| rep_spec
	| pragma
	;

decl_item_or_body_s1 ::= decl_item_or_body
	| decl_item_or_body_s1 decl_item_or_body
	;

decl_item_or_body ::= body
	| decl_item
	;

body ::= subprog_body
	| pkg_body
	| task_body
	| prot_body
	;

name ::= simple_name
	| indexed_comp
	| selected_comp
	| attribute
	| operator_symbol
	;

mark ::= simple_name
	| mark TICK attribute_id
	| mark DOT simple_name
	;

simple_name ::= IDENTIFIER
	;

compound_name ::= simple_name
	| compound_name DOT simple_name
	;

c_name_list ::= compound_name
	 | c_name_list COMMA compound_name
	;

used_char ::= CHARLIT
	;

operator_symbol ::= CHARSTRING
	;

indexed_comp ::= name LEFTPARENTHESIS value_s RIGHT
	;

value_s ::= value
	| value_s COMMA value
	;

value ::= expression
	| comp_assoc
	| discrete_with_range
	| error
	;

selected_comp ::= name DOT simple_name
	| name DOT used_char
	| name DOT operator_symbol
	| name DOT ALL
	;

attribute ::= name TICK attribute_id
	;

attribute_id ::= IDENTIFIER
	| DIGITS
	| DELTA
	| ACCESS
	;

literal ::= NUMERICLIT
	| used_char
	| NULL
	;

aggregate ::= LEFTPARENTHESIS comp_assoc RIGHT
	| LEFTPARENTHESIS value_s_2 RIGHT
	| LEFTPARENTHESIS expression WITH value_s RIGHT
	| LEFTPARENTHESIS expression WITH NULL RECORD RIGHT
	| LEFTPARENTHESIS NULL RECORD RIGHT
	;

value_s_2 ::= value COMMA value
	| value_s_2 COMMA value
	;

comp_assoc ::= choice_s ARROW expression
	;

expression ::= relation
	| expression logical relation
	| expression short_circuit relation
	;

logical ::= AND
	| OR
	| XOR
	;

short_circuit ::= AND THEN
	| OR ELSE
	;

relation ::= simple_expression
	| simple_expression relational simple_expression
	| simple_expression membership range
	| simple_expression membership name
	;

relational ::= EQUAL
	| NE
	| LESSTHAN
	| LEQ
	| GREATER
	| GE
	;

membership ::= IN
	| NOT IN
	;

simple_expression ::= unary term
	| term
	| simple_expression adding term
	;

unary   ::= PLUS
	| DASH
	;

adding  ::= PLUS
	| DASH
	| AMPERSAND
	;

term    ::= factor
	| term multiplying factor
	;

multiplying ::= STAR
	| SLASH
	| MOD
	| REM
	;

factor ::= primary
	| NOT primary
	| ABS primary
	| primary STARSTAR primary
	;

primary ::= literal
	| name
	| allocator
	| qualified
	| parenthesized_primary
	;

parenthesized_primary ::= aggregate
	| LEFTPARENTHESIS expression RIGHT
	;

qualified ::= name TICK parenthesized_primary
	;

allocator ::= NEW name
	| NEW qualified
	;

statement_s ::= statement
	| statement_s statement
	;

statement ::= unlabeled
	| label statement
	;

unlabeled ::= simple_stmt
	| compound_stmt
	| pragma
	;

simple_stmt ::= NULL_stmt
	| assign_stmt
	| exit_stmt
	| return_stmt
	| goto_stmt
	| procedure_call
	| delay_stmt
	| abort_stmt
	| raise_stmt
	| code_stmt
	| requeue_stmt
	| error SEMICOLON
	;

compound_stmt ::= if_stmt
	| case_stmt
	| loop_stmt
	| block
	| accept_stmt
	| select_stmt
	;

label ::= LT_LT IDENTIFIER GT_GT
	;

NULL_stmt ::= NULL SEMICOLON
	;

assign_stmt ::= name ASSIGN expression SEMICOLON
	;

if_stmt ::= IF cond_clause_s else_opt END IF SEMICOLON
	;

cond_clause_s ::= cond_clause
	| cond_clause_s ELSIF cond_clause
	;

cond_clause ::= cond_part statement_s
	;

cond_part ::= condition THEN
	;

condition ::= expression
	;

else_opt ::=
	| ELSE statement_s
	;

case_stmt ::= case_hdr pragma_s alternative_s END CASE SEMICOLON
	;

case_hdr ::= CASE expression IS
	;

alternative_s ::=
	| alternative_s alternative
	;

alternative ::= WHEN choice_s ARROW statement_s
	;

loop_stmt ::= label_opt iteration basic_loop id_opt SEMICOLON
	;

label_opt ::=
	| IDENTIFIER COLON
	;

iteration ::=
	| WHILE condition
	| iter_part reverse_opt discrete_range
	;

iter_part ::= FOR IDENTIFIER IN
	;

reverse_opt ::=
	| REVERSE
	;

basic_loop ::= LOOP statement_s END LOOP
	;

id_opt ::=
	| designator
	;

block ::= label_opt block_decl block_body END id_opt SEMICOLON
	;

block_decl ::=
	| DECLARE decl_part
	;

block_body ::= BEGIN handled_stmt_s
	;

handled_stmt_s ::= statement_s except_handler_part_opt 
	; 

except_handler_part_opt ::=
	| except_handler_part
	;

exit_stmt ::= EXIT name_opt when_opt SEMICOLON
	;

name_opt ::=
	| name
	;

when_opt ::=
	| WHEN condition
	;

return_stmt ::= RETURN SEMICOLON
	| RETURN expression SEMICOLON
	;

goto_stmt ::= GOTO name SEMICOLON
	;

subprog_decl ::= subprog_spec SEMICOLON
	| generic_subp_inst SEMICOLON
	| subprog_spec_is_push ABSTRACT SEMICOLON
	;

subprog_spec ::= PROCEDURE compound_name formal_part_opt
	| FUNCTION designator formal_part_opt RETURN name
	| FUNCTION designator  /* for generic inst and generic rename */
	;

designator ::= compound_name
	| CHARSTRING
	;

formal_part_opt ::= 
	| formal_part
	;

formal_part ::= LEFTPARENTHESIS param_s RIGHT
	;

param_s ::= param
	| param_s SEMICOLON param
	;

param ::= def_id_s COLON mode mark init_opt
	| error
	;

mode ::=
	| IN
	| OUT
	| IN OUT
	| ACCESS
	;

subprog_spec_is_push ::= subprog_spec IS
	;

subprog_body ::= subprog_spec_is_push
	       decl_part block_body END id_opt SEMICOLON
	;

procedure_call ::= name SEMICOLON
	;

pkg_decl ::= pkg_spec SEMICOLON
	| generic_pkg_inst SEMICOLON
	;

pkg_spec ::= PACKAGE compound_name IS 
	     decl_item_s private_part END c_id_opt
	;

private_part ::=
	| PRIVATE decl_item_s
	;

c_id_opt ::= 
	| compound_name
	;

pkg_body ::= PACKAGE BODY compound_name IS
	       decl_part body_opt END c_id_opt SEMICOLON
	;

body_opt ::=
	| block_body
	;

private_type ::= tagged_opt limited_opt PRIVATE
	;

limited_opt ::=
	| LIMITED
	;

use_clause ::= USE name_s SEMICOLON
	| USE TYPE name_s SEMICOLON
	;

name_s ::= name
	| name_s COMMA name
	;

rename_decl ::= def_id_s COLON object_qualifier_opt subtype_ind renames SEMICOLON
	| def_id_s COLON EXCEPTION renames SEMICOLON
	| rename_unit
	;

rename_unit ::= PACKAGE compound_name renames SEMICOLON
	| subprog_spec renames SEMICOLON
	| generic_formal_part PACKAGE compound_name renames SEMICOLON
	| generic_formal_part subprog_spec renames SEMICOLON
	;

renames ::= RENAMES name
	;

task_decl ::= task_spec SEMICOLON
	;

task_spec ::= TASK simple_name task_def
	| TASK TYPE simple_name discrim_part_opt task_def
	;

task_def ::=
	| IS entry_decl_s rep_spec_s task_private_opt END id_opt
	;

task_private_opt ::=
	| PRIVATE entry_decl_s rep_spec_s
	;

task_body ::= TASK BODY simple_name IS
	       decl_part block_body END id_opt SEMICOLON
	;

prot_decl ::= prot_spec SEMICOLON
	;

prot_spec ::= PROTECTED IDENTIFIER prot_def
	| PROTECTED TYPE simple_name discrim_part_opt prot_def
	;

prot_def ::= IS prot_op_decl_s prot_private_opt END id_opt
	;

prot_private_opt ::=
	| PRIVATE prot_elem_decl_s 
;

prot_op_decl_s ::= 
	| prot_op_decl_s prot_op_decl
	;

prot_op_decl ::= entry_decl
	| subprog_spec SEMICOLON
	| rep_spec
	| pragma
	;

prot_elem_decl_s ::= 
	| prot_elem_decl_s prot_elem_decl
	;

prot_elem_decl ::= prot_op_decl | comp_decl ;

prot_body ::= PROTECTED BODY simple_name IS
	       prot_op_body_s END id_opt SEMICOLON
	;

prot_op_body_s ::= pragma_s
	| prot_op_body_s prot_op_body pragma_s
	;

prot_op_body ::= entry_body
	| subprog_body
	| subprog_spec SEMICOLON
	;

entry_decl_s ::= pragma_s
	| entry_decl_s entry_decl pragma_s
	;

entry_decl ::= ENTRY IDENTIFIER formal_part_opt SEMICOLON
	| ENTRY IDENTIFIER LEFTPARENTHESIS discrete_range RIGHT formal_part_opt SEMICOLON
	;

entry_body ::= ENTRY IDENTIFIER formal_part_opt WHEN condition entry_body_part
	| ENTRY IDENTIFIER LEFTPARENTHESIS iter_part discrete_range RIGHT 
		formal_part_opt WHEN condition entry_body_part
	;

entry_body_part ::= SEMICOLON
	| IS decl_part block_body END id_opt SEMICOLON
	;

rep_spec_s ::=
	| rep_spec_s rep_spec pragma_s
	;

entry_call ::= procedure_call
	;

accept_stmt ::= accept_hdr SEMICOLON
	| accept_hdr DO handled_stmt_s END id_opt SEMICOLON
	;

accept_hdr ::= ACCEPT entry_name formal_part_opt
	;

entry_name ::= simple_name
	| entry_name LEFTPARENTHESIS expression RIGHT
	;

delay_stmt ::= DELAY expression SEMICOLON
	| DELAY UNTIL expression SEMICOLON
	;

select_stmt ::= select_wait
	| async_select
	| timed_entry_call
	| cond_entry_call
	;

select_wait ::= SELECT guarded_select_alt or_select else_opt
	      END SELECT SEMICOLON
	;

guarded_select_alt ::= select_alt
	| WHEN condition ARROW select_alt
	;

or_select ::=
	| or_select OR guarded_select_alt
	;

select_alt ::= accept_stmt stmts_opt
	| delay_stmt stmts_opt
	| TERMINATE SEMICOLON
	;

delay_or_entry_alt ::= delay_stmt stmts_opt
	| entry_call stmts_opt
;
async_select ::= SELECT delay_or_entry_alt
	       THEN ABORT statement_s
	       END SELECT SEMICOLON
	;

timed_entry_call ::= SELECT entry_call stmts_opt 
		   OR delay_stmt stmts_opt
	           END SELECT SEMICOLON
	;

cond_entry_call ::= SELECT entry_call stmts_opt 
		  ELSE statement_s
	          END SELECT SEMICOLON
	;

stmts_opt ::=
	| statement_s
	;

abort_stmt ::= ABORT name_s SEMICOLON
	;

compilation ::=
	| compilation comp_unit
	| pragma pragma_s
	;

comp_unit ::= context_spec private_opt unit pragma_s
	| private_opt unit pragma_s
	;

private_opt ::=
	| PRIVATE
	;

context_spec ::= with_clause use_clause_opt
	| context_spec with_clause use_clause_opt
	| context_spec pragma
	;

with_clause ::= WITH c_name_list SEMICOLON
	;

use_clause_opt ::=
	| use_clause_opt use_clause
	;

unit ::= pkg_decl
	| pkg_body
	| subprog_decl
	| subprog_body
	| subunit
	| generic_decl
	| rename_unit
	;

subunit ::= SEPARATE LEFTPARENTHESIS compound_name RIGHT
	      subunit_body
	;

subunit_body ::= subprog_body
	| pkg_body
	| task_body
	| prot_body
	;

body_stub ::= TASK BODY simple_name IS SEPARATE SEMICOLON
	| PACKAGE BODY compound_name IS SEPARATE SEMICOLON
	| subprog_spec IS SEPARATE SEMICOLON
	| PROTECTED BODY simple_name IS SEPARATE SEMICOLON
	;

exception_decl ::= def_id_s COLON EXCEPTION SEMICOLON
	;

except_handler_part ::= EXCEPTION exception_handler
	| except_handler_part exception_handler
	;

exception_handler ::= WHEN except_choice_s ARROW statement_s
	| WHEN IDENTIFIER COLON except_choice_s ARROW statement_s
	;

except_choice_s ::= except_choice
	| except_choice_s PIPE except_choice
	;

except_choice ::= name
	| OTHERS
	;

raise_stmt ::= RAISE name_opt SEMICOLON
	;

requeue_stmt ::= REQUEUE name SEMICOLON
	| REQUEUE name WITH ABORT SEMICOLON
	;

generic_decl ::= generic_formal_part subprog_spec SEMICOLON
	| generic_formal_part pkg_spec SEMICOLON
	;

generic_formal_part ::= GENERIC
	| generic_formal_part generic_formal
	;

generic_formal ::= param SEMICOLON
	| TYPE simple_name generic_discrim_part_opt IS generic_type_def SEMICOLON
	| WITH PROCEDURE simple_name 
	    formal_part_opt subp_default SEMICOLON
	| WITH FUNCTION designator 
	    formal_part_opt RETURN name subp_default SEMICOLON
	| WITH PACKAGE simple_name IS NEW name LEFTPARENTHESIS BOX RIGHT SEMICOLON
	| WITH PACKAGE simple_name IS NEW name SEMICOLON
	| use_clause
	;

generic_discrim_part_opt ::=
	| discrim_part
	| LEFTPARENTHESIS BOX RIGHT
	;

subp_default ::=
	| IS name
	| IS BOX
	;

generic_type_def ::= LEFTPARENTHESIS BOX RIGHT
	| RANGE BOX
	| MOD BOX
	| DELTA BOX
	| DELTA BOX DIGITS BOX
	| DIGITS BOX
	| array_type
	| access_type
	| private_type
	| generic_derived_type
	;

generic_derived_type ::= NEW subtype_ind
	| NEW subtype_ind WITH PRIVATE
	| ABSTRACT NEW subtype_ind WITH PRIVATE
	;

generic_subp_inst ::= subprog_spec IS generic_inst
	;

generic_pkg_inst ::= PACKAGE compound_name IS generic_inst
	;

generic_inst ::= NEW name
	;

rep_spec ::= attrib_def
	| record_type_spec
	| address_spec
	;

attrib_def ::= FOR mark USE expression SEMICOLON
	;

record_type_spec ::= FOR mark USE RECORD align_opt comp_loc_s END RECORD SEMICOLON
	;

align_opt ::=
	| AT MOD expression SEMICOLON
	;

comp_loc_s ::=
	| comp_loc_s mark AT expression RANGE range SEMICOLON
	;

address_spec ::= FOR mark USE AT expression SEMICOLON
	;

code_stmt ::= qualified SEMICOLON
	;