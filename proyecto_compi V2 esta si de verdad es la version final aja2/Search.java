/* The following code was generated by JFlex 1.6.1 */

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/cruxd/Desktop/proyecto_compi V2 esta si de verdad es la version final aja2/lexer.flex</tt>
 */
class Search implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int COMMENTS = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\4\1\61\1\62\1\3\22\0\1\2\1\0\1\60"+
    "\5\0\1\51\1\52\1\47\1\45\1\56\1\46\1\50\1\44\1\57"+
    "\11\1\1\41\1\55\1\43\1\42\1\43\2\0\1\5\1\40\3\5"+
    "\1\37\1\53\1\5\1\36\6\5\1\54\12\5\1\0\1\63\2\0"+
    "\1\6\1\0\1\7\1\10\1\16\1\15\1\20\1\26\1\22\1\27"+
    "\1\21\1\5\1\35\1\25\1\32\1\14\1\11\1\24\1\5\1\12"+
    "\1\17\1\13\1\34\1\33\1\30\1\23\1\31\1\5\12\0\1\61"+
    "\u1fa2\0\1\61\1\61\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\2\3\27\4\1\1\2\5\1\6"+
    "\2\7\1\6\1\1\1\10\1\11\2\4\1\12\1\13"+
    "\1\2\1\14\1\15\1\16\1\17\1\20\1\16\1\0"+
    "\2\4\1\21\5\4\1\22\1\4\1\23\12\4\1\24"+
    "\11\4\1\25\1\26\1\27\20\4\1\30\1\31\1\32"+
    "\2\4\1\0\1\33\1\34\1\35\1\36\1\37\1\4"+
    "\1\40\1\4\1\41\1\4\1\42\3\4\1\43\5\4"+
    "\1\44\5\4\1\45\1\46\12\4\1\47\5\4\1\50"+
    "\5\4\1\51\4\4\1\52\1\53\3\4\1\54\1\55"+
    "\3\4\1\56\10\4\1\57\1\4\1\60\1\61\1\62"+
    "\4\4\1\63\6\4\1\64\1\65\1\4\1\66\4\4"+
    "\1\67\2\4\1\70\1\71\4\4\1\72\1\73\2\4"+
    "\1\74\1\4\1\75\1\76\6\4\1\77\1\100\5\4"+
    "\1\101\1\4\1\102\6\4\1\103\1\4\1\104\1\4"+
    "\1\105\1\106\1\107\1\110\1\4\1\111\3\4\1\112"+
    "\2\4\1\113\12\4\1\114\1\115\1\4\1\116\2\4"+
    "\1\117\1\4\1\120\1\121\1\4\1\122\1\123\1\4"+
    "\1\124\1\125\1\4\1\126\1\127\2\4\1\130\1\131"+
    "\1\132\1\133";

  private static int [] zzUnpackAction() {
    int [] result = new int[297];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\234\0\u0104\0\u0138"+
    "\0\u016c\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8"+
    "\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478"+
    "\0\u04ac\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0\0\u05e4\0\234"+
    "\0\u0618\0\u0618\0\234\0\u064c\0\234\0\u0680\0\234\0\234"+
    "\0\u06b4\0\u06e8\0\234\0\234\0\u071c\0\234\0\u0750\0\234"+
    "\0\u0784\0\234\0\u07b8\0\u07ec\0\u0820\0\u0854\0\u0138\0\u0888"+
    "\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u0138\0\u098c\0\u0138\0\u09c0"+
    "\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60"+
    "\0\u0b94\0\u0138\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\u0ccc"+
    "\0\u0d00\0\u0d34\0\u0d68\0\u0138\0\u0138\0\u0138\0\u0d9c\0\u0dd0"+
    "\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70"+
    "\0\u0fa4\0\u0fd8\0\u100c\0\u1040\0\u1074\0\u10a8\0\234\0\234"+
    "\0\234\0\u10dc\0\u1110\0\u071c\0\234\0\234\0\234\0\234"+
    "\0\u07ec\0\u1144\0\u0138\0\u1178\0\u0138\0\u11ac\0\u0138\0\u11e0"+
    "\0\u1214\0\u1248\0\u0138\0\u127c\0\u12b0\0\u12e4\0\u1318\0\u134c"+
    "\0\u0138\0\u1380\0\u13b4\0\u13e8\0\u141c\0\u1450\0\u0138\0\u0138"+
    "\0\u1484\0\u14b8\0\u14ec\0\u1520\0\u1554\0\u1588\0\u15bc\0\u15f0"+
    "\0\u1624\0\u1658\0\u0138\0\u168c\0\u16c0\0\u16f4\0\u1728\0\u175c"+
    "\0\u0138\0\u1790\0\u17c4\0\u17f8\0\u182c\0\u1860\0\u0138\0\u1894"+
    "\0\u18c8\0\u18fc\0\u1930\0\u0138\0\u0138\0\u1964\0\u1998\0\u19cc"+
    "\0\u0138\0\u0138\0\u1a00\0\u1a34\0\u1a68\0\u0138\0\u1a9c\0\u1ad0"+
    "\0\u1b04\0\u1b38\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08\0\u0138\0\u1c3c"+
    "\0\u0138\0\u0138\0\u0138\0\u1c70\0\u1ca4\0\u1cd8\0\u1d0c\0\u0138"+
    "\0\u1d40\0\u1d74\0\u1da8\0\u1ddc\0\u1e10\0\u1e44\0\u0138\0\u0138"+
    "\0\u1e78\0\u0138\0\u1eac\0\u1ee0\0\u1f14\0\u1f48\0\u0138\0\u1f7c"+
    "\0\u1fb0\0\u0138\0\u0138\0\u1fe4\0\u2018\0\u204c\0\u2080\0\u0138"+
    "\0\u0138\0\u20b4\0\u20e8\0\u0138\0\u211c\0\u0138\0\u0138\0\u2150"+
    "\0\u2184\0\u21b8\0\u21ec\0\u2220\0\u2254\0\u0138\0\u0138\0\u2288"+
    "\0\u22bc\0\u22f0\0\u2324\0\u2358\0\u0138\0\u238c\0\u0138\0\u23c0"+
    "\0\u23f4\0\u2428\0\u245c\0\u2490\0\u24c4\0\u0138\0\u24f8\0\u0138"+
    "\0\u252c\0\u0138\0\u0138\0\u0138\0\u0138\0\u2560\0\u0138\0\u2594"+
    "\0\u25c8\0\u25fc\0\u0138\0\u2630\0\u2664\0\u0138\0\u2698\0\u26cc"+
    "\0\u2700\0\u2734\0\u2768\0\u279c\0\u27d0\0\u2804\0\u2838\0\u286c"+
    "\0\u0138\0\u0138\0\u28a0\0\u0138\0\u28d4\0\u2908\0\u0138\0\u293c"+
    "\0\u0138\0\u0138\0\u2970\0\u0138\0\u0138\0\u29a4\0\u0138\0\u0138"+
    "\0\u29d8\0\u0138\0\u0138\0\u2a0c\0\u2a40\0\u0138\0\u0138\0\u0138"+
    "\0\u0138";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[297];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\6\1\10\1\4\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\10"+
    "\1\31\1\10\1\32\1\10\1\33\1\10\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\0\1\6\1\4\3\57\2\0\53\57\1\60"+
    "\2\57\1\61\3\62\1\63\1\60\54\62\2\0\1\62"+
    "\65\0\1\5\46\0\1\64\6\0\1\5\10\0\1\6"+
    "\60\0\1\10\3\0\34\10\12\0\2\10\2\0\1\10"+
    "\5\0\1\10\3\0\3\10\1\65\1\10\1\66\1\67"+
    "\1\70\1\10\1\71\6\10\1\72\13\10\12\0\2\10"+
    "\2\0\1\10\5\0\1\10\3\0\4\10\1\73\6\10"+
    "\1\74\20\10\12\0\2\10\2\0\1\10\5\0\1\10"+
    "\3\0\5\10\1\75\1\76\12\10\1\77\5\10\1\100"+
    "\4\10\12\0\2\10\2\0\1\10\5\0\1\10\3\0"+
    "\2\10\1\101\10\10\1\102\20\10\12\0\2\10\2\0"+
    "\1\10\5\0\1\10\3\0\2\10\1\103\10\10\1\104"+
    "\6\10\1\105\1\10\1\106\7\10\12\0\2\10\2\0"+
    "\1\10\5\0\1\10\3\0\4\10\1\107\6\10\1\110"+
    "\13\10\1\111\4\10\12\0\2\10\2\0\1\10\5\0"+
    "\1\10\3\0\4\10\1\112\6\10\1\113\1\114\17\10"+
    "\12\0\2\10\2\0\1\10\5\0\1\10\3\0\2\10"+
    "\1\115\1\10\1\116\27\10\12\0\2\10\2\0\1\10"+
    "\5\0\1\10\3\0\13\10\1\117\13\10\1\120\4\10"+
    "\12\0\2\10\2\0\1\10\5\0\1\10\3\0\7\10"+
    "\1\121\6\10\1\122\1\10\1\123\13\10\12\0\2\10"+
    "\2\0\1\10\5\0\1\10\3\0\7\10\1\124\2\10"+
    "\1\125\6\10\1\126\12\10\12\0\2\10\2\0\1\10"+
    "\5\0\1\10\3\0\4\10\1\127\6\10\1\130\20\10"+
    "\12\0\2\10\2\0\1\10\5\0\1\10\3\0\4\10"+
    "\1\131\27\10\12\0\2\10\2\0\1\10\5\0\1\10"+
    "\3\0\2\10\1\132\2\10\1\133\26\10\12\0\2\10"+
    "\2\0\1\10\5\0\1\10\3\0\4\10\1\134\7\10"+
    "\1\135\17\10\12\0\2\10\2\0\1\10\5\0\1\10"+
    "\3\0\4\10\1\136\22\10\1\137\4\10\12\0\2\10"+
    "\2\0\1\10\5\0\1\10\3\0\14\10\1\140\5\10"+
    "\1\141\11\10\12\0\2\10\2\0\1\10\5\0\1\10"+
    "\3\0\4\10\1\142\27\10\12\0\2\10\2\0\1\10"+
    "\5\0\1\10\3\0\12\10\1\143\21\10\12\0\2\10"+
    "\2\0\1\10\5\0\1\10\3\0\7\10\1\144\24\10"+
    "\12\0\2\10\2\0\1\10\5\0\1\10\3\0\20\10"+
    "\1\145\13\10\12\0\2\10\2\0\1\10\5\0\1\10"+
    "\3\0\4\10\1\146\27\10\12\0\2\10\2\0\1\10"+
    "\46\0\1\147\63\0\1\40\67\0\1\150\65\0\1\151"+
    "\14\0\1\10\3\0\13\10\1\152\20\10\12\0\2\10"+
    "\2\0\1\10\5\0\1\10\3\0\27\10\1\153\4\10"+
    "\12\0\2\10\2\0\1\10\5\0\1\154\46\0\1\64"+
    "\6\0\1\154\4\0\3\57\2\0\53\57\1\0\2\57"+
    "\13\0\1\155\1\156\1\157\43\0\1\160\7\0\1\60"+
    "\60\0\1\161\55\0\1\161\5\0\1\10\3\0\4\10"+
    "\1\162\5\10\1\163\21\10\12\0\2\10\2\0\1\10"+
    "\5\0\1\10\3\0\5\10\1\164\26\10\12\0\2\10"+
    "\2\0\1\10\5\0\1\10\3\0\10\10\1\165\23\10"+
    "\12\0\2\10\2\0\1\10\5\0\1\10\3\0\11\10"+
    "\1\166\22\10\12\0\2\10\2\0\1\10\5\0\1\10"+
    "\3\0\20\10\1\167\13\10\12\0\2\10\2\0\1\10"+
    "\5\0\1\10\3\0\10\10\1\170\23\10\12\0\2\10"+
    "\2\0\1\10\5\0\1\10\3\0\15\10\1\171\16\10"+
    "\12\0\2\10\2\0\1\10\5\0\1\10\3\0\22\10"+
    "\1\172\11\10\12\0\2\10\2\0\1\10\5\0\1\10"+
    "\3\0\6\10\1\173\25\10\12\0\2\10\2\0\1\10"+
    "\5\0\1\10\3\0\7\10\1\174\4\10\1\175\17\10"+
    "\12\0\2\10\2\0\1\10\5\0\1\10\3\0\6\10"+
    "\1\176\1\177\1\10\1\200\13\10\1\201\1\202\5\10"+
    "\12\0\2\10\2\0\1\10\5\0\1\10\3\0\12\10"+
    "\1\203\21\10\12\0\2\10\2\0\1\10\5\0\1\10"+
    "\3\0\5\10\1\204\26\10\12\0\2\10\2\0\1\10"+
    "\5\0\1\10\3\0\13\10\1\205\20\10\12\0\2\10"+
    "\2\0\1\10\5\0\1\10\3\0\17\10\1\206\14\10"+
    "\12\0\2\10\2\0\1\10\5\0\1\10\3\0\6\10"+
    "\1\207\25\10\12\0\2\10\2\0\1\10\5\0\1\10"+
    "\3\0\23\10\1\210\10\10\12\0\2\10\2\0\1\10"+
    "\5\0\1\10\3\0\20\10\1\211\13\10\12\0\2\10"+
    "\2\0\1\10\5\0\1\10\3\0\11\10\1\212\6\10"+
    "\1\213\13\10\12\0\2\10\2\0\1\10\5\0\1\10"+
    "\3\0\15\10\1\214\16\10\12\0\2\10\2\0\1\10"+
    "\5\0\1\10\3\0\12\10\1\215\21\10\12\0\2\10"+
    "\2\0\1\10\5\0\1\10\3\0\7\10\1\216\24\10"+
    "\12\0\2\10\2\0\1\10\5\0\1\10\3\0\17\10"+
    "\1\217\1\220\13\10\12\0\2\10\2\0\1\10\5\0"+
    "\1\10\3\0\3\10\1\221\30\10\12\0\2\10\2\0"+
    "\1\10\5\0\1\10\3\0\6\10\1\222\1\10\1\223"+
    "\23\10\12\0\2\10\2\0\1\10\5\0\1\10\3\0"+
    "\11\10\1\224\2\10\1\225\17\10\12\0\2\10\2\0"+
    "\1\10\5\0\1\10\3\0\12\10\1\226\21\10\12\0"+
    "\2\10\2\0\1\10\5\0\1\10\3\0\6\10\1\227"+
    "\25\10\12\0\2\10\2\0\1\10\5\0\1\10\3\0"+
    "\7\10\1\230\24\10\12\0\2\10\2\0\1\10\5\0"+
    "\1\10\3\0\5\10\1\231\26\10\12\0\2\10\2\0"+
    "\1\10\5\0\1\10\3\0\11\10\1\232\22\10\12\0"+
    "\2\10\2\0\1\10\5\0\1\10\3\0\4\10\1\233"+
    "\7\10\1\234\17\10\12\0\2\10\2\0\1\10\5\0"+
    "\1\10\3\0\4\10\1\235\27\10\12\0\2\10\2\0"+
    "\1\10\5\0\1\10\3\0\25\10\1\236\6\10\12\0"+
    "\2\10\2\0\1\10\5\0\1\10\3\0\5\10\1\237"+
    "\26\10\12\0\2\10\2\0\1\10\5\0\1\10\3\0"+
    "\7\10\1\240\24\10\12\0\2\10\2\0\1\10\5\0"+
    "\1\10\3\0\6\10\1\241\25\10\12\0\2\10\2\0"+
    "\1\10\5\0\1\10\3\0\13\10\1\242\1\243\17\10"+
    "\12\0\2\10\2\0\1\10\5\0\1\10\3\0\10\10"+
    "\1\244\23\10\12\0\2\10\2\0\1\10\5\0\1\10"+
    "\3\0\13\10\1\245\20\10\12\0\2\10\2\0\1\10"+
    "\5\0\1\10\3\0\6\10\1\246\25\10\12\0\2\10"+
    "\2\0\1\10\5\0\1\10\3\0\4\10\1\247\27\10"+
    "\12\0\2\10\2\0\1\10\5\0\1\10\3\0\4\10"+
    "\1\250\27\10\12\0\2\10\2\0\1\10\5\0\1\10"+
    "\3\0\6\10\1\251\25\10\12\0\2\10\2\0\1\10"+
    "\5\0\1\10\3\0\6\10\1\252\25\10\12\0\2\10"+
    "\2\0\1\10\5\0\1\10\3\0\5\10\1\253\26\10"+
    "\12\0\2\10\2\0\1\10\5\0\1\10\3\0\2\10"+
    "\1\254\31\10\12\0\2\10\2\0\1\10\5\0\1\10"+
    "\3\0\13\10\1\255\20\10\12\0\2\10\2\0\1\10"+
    "\5\0\1\10\3\0\24\10\1\256\7\10\12\0\2\10"+
    "\2\0\1\10\5\0\1\10\3\0\14\10\1\257\17\10"+
    "\12\0\2\10\2\0\1\10\5\0\1\10\3\0\13\10"+
    "\1\260\20\10\12\0\2\10\2\0\1\10\5\0\1\10"+
    "\3\0\15\10\1\261\16\10\12\0\2\10\2\0\1\10"+
    "\5\0\1\10\3\0\12\10\1\262\21\10\12\0\2\10"+
    "\2\0\1\10\5\0\1\10\3\0\27\10\1\263\4\10"+
    "\12\0\2\10\2\0\1\10\5\0\1\10\3\0\2\10"+
    "\1\264\31\10\12\0\2\10\2\0\1\10\5\0\1\10"+
    "\3\0\4\10\1\265\27\10\12\0\2\10\2\0\1\10"+
    "\5\0\1\10\3\0\13\10\1\266\20\10\12\0\2\10"+
    "\2\0\1\10\5\0\1\10\3\0\30\10\1\267\3\10"+
    "\12\0\2\10\2\0\1\10\5\0\1\10\3\0\25\10"+
    "\1\270\6\10\12\0\2\10\2\0\1\10\5\0\1\10"+
    "\3\0\7\10\1\271\24\10\12\0\2\10\2\0\1\10"+
    "\5\0\1\10\3\0\13\10\1\272\20\10\12\0\2\10"+
    "\2\0\1\10\5\0\1\10\3\0\20\10\1\273\13\10"+
    "\12\0\2\10\2\0\1\10\5\0\1\10\3\0\20\10"+
    "\1\274\13\10\12\0\2\10\2\0\1\10\5\0\1\10"+
    "\3\0\2\10\1\275\3\10\1\276\25\10\12\0\2\10"+
    "\2\0\1\10\5\0\1\10\3\0\14\10\1\277\17\10"+
    "\12\0\2\10\2\0\1\10\5\0\1\10\3\0\13\10"+
    "\1\300\20\10\12\0\2\10\2\0\1\10\5\0\1\10"+
    "\3\0\12\10\1\301\21\10\12\0\2\10\2\0\1\10"+
    "\5\0\1\10\3\0\2\10\1\302\31\10\12\0\2\10"+
    "\2\0\1\10\5\0\1\10\3\0\13\10\1\303\20\10"+
    "\12\0\2\10\2\0\1\10\5\0\1\10\3\0\6\10"+
    "\1\304\25\10\12\0\2\10\2\0\1\10\5\0\1\10"+
    "\3\0\5\10\1\305\26\10\12\0\2\10\2\0\1\10"+
    "\5\0\1\10\3\0\13\10\1\306\20\10\12\0\2\10"+
    "\2\0\1\10\5\0\1\10\3\0\6\10\1\307\25\10"+
    "\12\0\2\10\2\0\1\10\5\0\1\10\3\0\13\10"+
    "\1\310\1\311\17\10\12\0\2\10\2\0\1\10\5\0"+
    "\1\10\3\0\4\10\1\312\27\10\12\0\2\10\2\0"+
    "\1\10\5\0\1\10\3\0\13\10\1\313\20\10\12\0"+
    "\2\10\2\0\1\10\5\0\1\10\3\0\30\10\1\314"+
    "\3\10\12\0\2\10\2\0\1\10\5\0\1\10\3\0"+
    "\11\10\1\315\22\10\12\0\2\10\2\0\1\10\5\0"+
    "\1\10\3\0\26\10\1\316\5\10\12\0\2\10\2\0"+
    "\1\10\5\0\1\10\3\0\17\10\1\317\14\10\12\0"+
    "\2\10\2\0\1\10\5\0\1\10\3\0\14\10\1\320"+
    "\17\10\12\0\2\10\2\0\1\10\5\0\1\10\3\0"+
    "\11\10\1\321\22\10\12\0\2\10\2\0\1\10\5\0"+
    "\1\10\3\0\22\10\1\322\11\10\12\0\2\10\2\0"+
    "\1\10\5\0\1\10\3\0\7\10\1\323\24\10\12\0"+
    "\2\10\2\0\1\10\5\0\1\10\3\0\20\10\1\324"+
    "\13\10\12\0\2\10\2\0\1\10\5\0\1\10\3\0"+
    "\13\10\1\325\20\10\12\0\2\10\2\0\1\10\5\0"+
    "\1\10\3\0\2\10\1\326\31\10\12\0\2\10\2\0"+
    "\1\10\5\0\1\10\3\0\20\10\1\327\13\10\12\0"+
    "\2\10\2\0\1\10\5\0\1\10\3\0\6\10\1\330"+
    "\25\10\12\0\2\10\2\0\1\10\5\0\1\10\3\0"+
    "\24\10\1\331\7\10\12\0\2\10\2\0\1\10\5\0"+
    "\1\10\3\0\12\10\1\332\4\10\1\333\14\10\12\0"+
    "\2\10\2\0\1\10\5\0\1\10\3\0\7\10\1\334"+
    "\24\10\12\0\2\10\2\0\1\10\5\0\1\10\3\0"+
    "\5\10\1\335\26\10\12\0\2\10\2\0\1\10\5\0"+
    "\1\10\3\0\13\10\1\336\20\10\12\0\2\10\2\0"+
    "\1\10\5\0\1\10\3\0\13\10\1\337\20\10\12\0"+
    "\2\10\2\0\1\10\5\0\1\10\3\0\5\10\1\340"+
    "\26\10\12\0\2\10\2\0\1\10\5\0\1\10\3\0"+
    "\25\10\1\341\6\10\12\0\2\10\2\0\1\10\5\0"+
    "\1\10\3\0\5\10\1\342\26\10\12\0\2\10\2\0"+
    "\1\10\5\0\1\10\3\0\5\10\1\343\26\10\12\0"+
    "\2\10\2\0\1\10\5\0\1\10\3\0\14\10\1\344"+
    "\17\10\12\0\2\10\2\0\1\10\5\0\1\10\3\0"+
    "\2\10\1\345\31\10\12\0\2\10\2\0\1\10\5\0"+
    "\1\10\3\0\24\10\1\346\7\10\12\0\2\10\2\0"+
    "\1\10\5\0\1\10\3\0\2\10\1\347\31\10\12\0"+
    "\2\10\2\0\1\10\5\0\1\10\3\0\6\10\1\350"+
    "\25\10\12\0\2\10\2\0\1\10\5\0\1\10\3\0"+
    "\6\10\1\351\25\10\12\0\2\10\2\0\1\10\5\0"+
    "\1\10\3\0\5\10\1\352\26\10\12\0\2\10\2\0"+
    "\1\10\5\0\1\10\3\0\11\10\1\353\22\10\12\0"+
    "\2\10\2\0\1\10\5\0\1\10\3\0\24\10\1\354"+
    "\7\10\12\0\2\10\2\0\1\10\5\0\1\10\3\0"+
    "\24\10\1\355\7\10\12\0\2\10\2\0\1\10\5\0"+
    "\1\10\3\0\17\10\1\356\14\10\12\0\2\10\2\0"+
    "\1\10\5\0\1\10\3\0\21\10\1\357\12\10\12\0"+
    "\2\10\2\0\1\10\5\0\1\10\3\0\5\10\1\360"+
    "\26\10\12\0\2\10\2\0\1\10\5\0\1\10\3\0"+
    "\2\10\1\361\31\10\12\0\2\10\2\0\1\10\5\0"+
    "\1\10\3\0\13\10\1\362\20\10\12\0\2\10\2\0"+
    "\1\10\5\0\1\10\3\0\2\10\1\363\31\10\12\0"+
    "\2\10\2\0\1\10\5\0\1\10\3\0\6\10\1\364"+
    "\25\10\12\0\2\10\2\0\1\10\5\0\1\10\3\0"+
    "\6\10\1\365\25\10\12\0\2\10\2\0\1\10\5\0"+
    "\1\10\3\0\13\10\1\366\20\10\12\0\2\10\2\0"+
    "\1\10\5\0\1\10\3\0\15\10\1\367\16\10\12\0"+
    "\2\10\2\0\1\10\5\0\1\10\3\0\6\10\1\370"+
    "\25\10\12\0\2\10\2\0\1\10\5\0\1\10\3\0"+
    "\13\10\1\371\20\10\12\0\2\10\2\0\1\10\5\0"+
    "\1\10\3\0\12\10\1\372\21\10\12\0\2\10\2\0"+
    "\1\10\5\0\1\10\3\0\6\10\1\373\25\10\12\0"+
    "\2\10\2\0\1\10\5\0\1\10\3\0\12\10\1\374"+
    "\21\10\12\0\2\10\2\0\1\10\5\0\1\10\3\0"+
    "\7\10\1\375\24\10\12\0\2\10\2\0\1\10\5\0"+
    "\1\10\3\0\13\10\1\376\20\10\12\0\2\10\2\0"+
    "\1\10\5\0\1\10\3\0\10\10\1\377\23\10\12\0"+
    "\2\10\2\0\1\10\5\0\1\10\3\0\12\10\1\u0100"+
    "\21\10\12\0\2\10\2\0\1\10\5\0\1\10\3\0"+
    "\7\10\1\u0101\24\10\12\0\2\10\2\0\1\10\5\0"+
    "\1\10\3\0\5\10\1\u0102\26\10\12\0\2\10\2\0"+
    "\1\10\5\0\1\10\3\0\12\10\1\u0103\21\10\12\0"+
    "\2\10\2\0\1\10\5\0\1\10\3\0\2\10\1\u0104"+
    "\31\10\12\0\2\10\2\0\1\10\5\0\1\10\3\0"+
    "\2\10\1\u0105\31\10\12\0\2\10\2\0\1\10\5\0"+
    "\1\10\3\0\6\10\1\u0106\25\10\12\0\2\10\2\0"+
    "\1\10\5\0\1\10\3\0\17\10\1\u0107\14\10\12\0"+
    "\2\10\2\0\1\10\5\0\1\10\3\0\6\10\1\u0108"+
    "\25\10\12\0\2\10\2\0\1\10\5\0\1\10\3\0"+
    "\14\10\1\u0109\17\10\12\0\2\10\2\0\1\10\5\0"+
    "\1\10\3\0\15\10\1\u010a\16\10\12\0\2\10\2\0"+
    "\1\10\5\0\1\10\3\0\10\10\1\u010b\23\10\12\0"+
    "\2\10\2\0\1\10\5\0\1\10\3\0\6\10\1\u010c"+
    "\25\10\12\0\2\10\2\0\1\10\5\0\1\10\3\0"+
    "\13\10\1\u010d\20\10\12\0\2\10\2\0\1\10\5\0"+
    "\1\10\3\0\14\10\1\u010e\17\10\12\0\2\10\2\0"+
    "\1\10\5\0\1\10\3\0\13\10\1\u010f\20\10\12\0"+
    "\2\10\2\0\1\10\5\0\1\10\3\0\2\10\1\u0110"+
    "\31\10\12\0\2\10\2\0\1\10\5\0\1\10\3\0"+
    "\12\10\1\u0111\21\10\12\0\2\10\2\0\1\10\5\0"+
    "\1\10\3\0\13\10\1\u0112\20\10\12\0\2\10\2\0"+
    "\1\10\5\0\1\10\3\0\2\10\1\u0113\31\10\12\0"+
    "\2\10\2\0\1\10\5\0\1\10\3\0\13\10\1\u0114"+
    "\20\10\12\0\2\10\2\0\1\10\5\0\1\10\3\0"+
    "\7\10\1\u0115\24\10\12\0\2\10\2\0\1\10\5\0"+
    "\1\10\3\0\6\10\1\u0116\25\10\12\0\2\10\2\0"+
    "\1\10\5\0\1\10\3\0\13\10\1\u0117\20\10\12\0"+
    "\2\10\2\0\1\10\5\0\1\10\3\0\14\10\1\u0118"+
    "\17\10\12\0\2\10\2\0\1\10\5\0\1\10\3\0"+
    "\11\10\1\u0119\22\10\12\0\2\10\2\0\1\10\5\0"+
    "\1\10\3\0\13\10\1\u011a\20\10\12\0\2\10\2\0"+
    "\1\10\5\0\1\10\3\0\27\10\1\u011b\4\10\12\0"+
    "\2\10\2\0\1\10\5\0\1\10\3\0\13\10\1\u011c"+
    "\20\10\12\0\2\10\2\0\1\10\5\0\1\10\3\0"+
    "\10\10\1\u011d\23\10\12\0\2\10\2\0\1\10\5\0"+
    "\1\10\3\0\4\10\1\u011e\27\10\12\0\2\10\2\0"+
    "\1\10\5\0\1\10\3\0\5\10\1\u011f\26\10\12\0"+
    "\2\10\2\0\1\10\5\0\1\10\3\0\7\10\1\u0120"+
    "\24\10\12\0\2\10\2\0\1\10\5\0\1\10\3\0"+
    "\6\10\1\u0121\25\10\12\0\2\10\2\0\1\10\5\0"+
    "\1\10\3\0\6\10\1\u0122\25\10\12\0\2\10\2\0"+
    "\1\10\5\0\1\10\3\0\13\10\1\u0123\20\10\12\0"+
    "\2\10\2\0\1\10\5\0\1\10\3\0\4\10\1\u0124"+
    "\27\10\12\0\2\10\2\0\1\10\5\0\1\10\3\0"+
    "\5\10\1\u0125\26\10\12\0\2\10\2\0\1\10\5\0"+
    "\1\10\3\0\7\10\1\u0126\24\10\12\0\2\10\2\0"+
    "\1\10\5\0\1\10\3\0\13\10\1\u0127\20\10\12\0"+
    "\2\10\2\0\1\10\5\0\1\10\3\0\7\10\1\u0128"+
    "\24\10\12\0\2\10\2\0\1\10\5\0\1\10\3\0"+
    "\13\10\1\u0129\20\10\12\0\2\10\2\0\1\10\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10868];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\31\1\1\11\2\1\1\11"+
    "\1\1\1\11\1\1\2\11\2\1\2\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\0\62\1\3\11"+
    "\2\1\1\0\4\11\271\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[297];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    StringBuffer string = new StringBuffer();
    StringBuffer comment = new StringBuffer();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Search(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 180) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.print("Unexpected token: "+ yytext());
            }
          case 92: break;
          case 2: 
            { return new Symbol(sym.NUM,yycolumn+1,yyline+1,yytext());
            }
          case 93: break;
          case 3: 
            { 
            }
          case 94: break;
          case 4: 
            { return new Symbol(sym.IDENTIFIER,yycolumn+1,yyline+1,yytext());
            }
          case 95: break;
          case 5: 
            { return new Symbol(sym.OPREL,yycolumn+1,yyline+1,yytext());
            }
          case 96: break;
          case 6: 
            { return new Symbol(sym.MULDIV,yycolumn+1,yyline+1,yytext());
            }
          case 97: break;
          case 7: 
            { return new Symbol(sym.SUMSUBS,yycolumn+1,yyline+1,yytext());
            }
          case 98: break;
          case 8: 
            { return new Symbol(sym.LPAR,yycolumn+1,yyline+1,yytext());
            }
          case 99: break;
          case 9: 
            { return new Symbol(sym.RPAR,yycolumn+1,yyline+1,yytext());
            }
          case 100: break;
          case 10: 
            { return new Symbol(sym.SEMICOLON,yycolumn+1,yyline+1,yytext());
            }
          case 101: break;
          case 11: 
            { return new Symbol(sym.COMMA,yycolumn+1,yyline+1,yytext());
            }
          case 102: break;
          case 12: 
            { string.setLength(0); yybegin(STRING);
            }
          case 103: break;
          case 13: 
            { string.append( yytext() );
            }
          case 104: break;
          case 14: 
            { yybegin(YYINITIAL);
            }
          case 105: break;
          case 15: 
            { string.append('\\');
            }
          case 106: break;
          case 16: 
            { comment.append( yytext() );
            }
          case 107: break;
          case 17: 
            { return new Symbol(sym.AT,yycolumn+1,yyline+1,yytext());
            }
          case 108: break;
          case 18: 
            { return new Symbol(sym.OR,yycolumn+1,yyline+1,yytext());
            }
          case 109: break;
          case 19: 
            { return new Symbol(sym.OF,yycolumn+1,yyline+1,yytext());
            }
          case 110: break;
          case 20: 
            { return new Symbol(sym.DO,yycolumn+1,yyline+1,yytext());
            }
          case 111: break;
          case 21: 
            { return new Symbol(sym.IN,yycolumn+1,yyline+1,yytext());
            }
          case 112: break;
          case 22: 
            { return new Symbol(sym.IS,yycolumn+1,yyline+1,yytext());
            }
          case 113: break;
          case 23: 
            { return new Symbol(sym.IF,yycolumn+1,yyline+1,yytext());
            }
          case 114: break;
          case 24: 
            { return new Symbol(sym.ASSIGN,yycolumn+1,yyline+1,yytext());
            }
          case 115: break;
          case 25: 
            { comment.setLength(0); yybegin(COMMENTS);
            }
          case 116: break;
          case 26: 
            { return new Symbol(sym.DOTDOT,yycolumn+1,yyline+1,yytext());
            }
          case 117: break;
          case 27: 
            { string.append('\r');
            }
          case 118: break;
          case 28: 
            { string.append('\t');
            }
          case 119: break;
          case 29: 
            { string.append('\n');
            }
          case 120: break;
          case 30: 
            { string.append('\"');
            }
          case 121: break;
          case 31: 
            { return new Symbol(sym.REAL,yycolumn+1,yyline+1,yytext());
            }
          case 122: break;
          case 32: 
            { return new Symbol(sym.ABS,yycolumn+1,yyline+1,yytext());
            }
          case 123: break;
          case 33: 
            { return new Symbol(sym.AND,yycolumn+1,yyline+1,yytext());
            }
          case 124: break;
          case 34: 
            { return new Symbol(sym.ALL,yycolumn+1,yyline+1,yytext());
            }
          case 125: break;
          case 35: 
            { return new Symbol(sym.OUT,yycolumn+1,yyline+1,yytext());
            }
          case 126: break;
          case 36: 
            { return new Symbol(sym.REM,yycolumn+1,yyline+1,yytext());
            }
          case 127: break;
          case 37: 
            { return new Symbol(sym.NOT,yycolumn+1,yyline+1,yytext());
            }
          case 128: break;
          case 38: 
            { return new Symbol(sym.NEW,yycolumn+1,yyline+1,yytext());
            }
          case 129: break;
          case 39: 
            { return new Symbol(sym.END,yycolumn+1,yyline+1,yytext());
            }
          case 130: break;
          case 40: 
            { return new Symbol(sym.XOR,yycolumn+1,yyline+1,yytext());
            }
          case 131: break;
          case 41: 
            { return new Symbol(sym.FOR,yycolumn+1,yyline+1,yytext());
            }
          case 132: break;
          case 42: 
            { return new Symbol(sym.MOD,yycolumn+1,yyline+1,yytext());
            }
          case 133: break;
          case 43: 
            { return new Symbol(sym.USE,yycolumn+1,yyline+1,yytext());
            }
          case 134: break;
          case 44: 
            { return new Symbol(sym.GET,yycolumn+1,yyline+1,yytext());
            }
          case 135: break;
          case 45: 
            { return new Symbol(sym.PUT,yycolumn+1,yyline+1,yytext());
            }
          case 136: break;
          case 46: 
            { return new Symbol(sym.BODY,yycolumn+1,yyline+1,yytext());
            }
          case 137: break;
          case 47: 
            { return new Symbol(sym.TASK,yycolumn+1,yyline+1,yytext());
            }
          case 138: break;
          case 48: 
            { return new Symbol(sym.THEN,yycolumn+1,yyline+1,yytext());
            }
          case 139: break;
          case 49: 
            { return new Symbol(sym.TYPE,yycolumn+1,yyline+1,yytext());
            }
          case 140: break;
          case 50: 
            { return new Symbol(sym.NULL,yycolumn+1,yyline+1,yytext());
            }
          case 141: break;
          case 51: 
            { return new Symbol(sym.CASE,yycolumn+1,yyline+1,yytext());
            }
          case 142: break;
          case 52: 
            { return new Symbol(sym.EXIT,yycolumn+1,yyline+1,yytext());
            }
          case 143: break;
          case 53: 
            { return new Symbol(sym.ELSE,yycolumn+1,yyline+1,yytext());
            }
          case 144: break;
          case 54: 
            { return new Symbol(sym.GOTO,yycolumn+1,yyline+1,yytext());
            }
          case 145: break;
          case 55: 
            { return new Symbol(sym.LOOP,yycolumn+1,yyline+1,yytext());
            }
          case 146: break;
          case 56: 
            { return new Symbol(sym.WITH,yycolumn+1,yyline+1,yytext());
            }
          case 147: break;
          case 57: 
            { return new Symbol(sym.WHEN,yycolumn+1,yyline+1,yytext());
            }
          case 148: break;
          case 58: 
            { return new Symbol(sym.ABORT,yycolumn+1,yyline+1,yytext());
            }
          case 149: break;
          case 59: 
            { return new Symbol(sym.ARRAY,yycolumn+1,yyline+1,yytext());
            }
          case 150: break;
          case 60: 
            { return new Symbol(sym.BEGIN,yycolumn+1,yyline+1,yytext());
            }
          case 151: break;
          case 61: 
            { return new Symbol(sym.RANGE,yycolumn+1,yyline+1,yytext());
            }
          case 152: break;
          case 62: 
            { return new Symbol(sym.RAISE,yycolumn+1,yyline+1,yytext());
            }
          case 153: break;
          case 63: 
            { return new Symbol(sym.DELAY,yycolumn+1,yyline+1,yytext());
            }
          case 154: break;
          case 64: 
            { return new Symbol(sym.DELTA,yycolumn+1,yyline+1,yytext());
            }
          case 155: break;
          case 65: 
            { return new Symbol(sym.ENTRY,yycolumn+1,yyline+1,yytext());
            }
          case 156: break;
          case 66: 
            { return new Symbol(sym.ELSIF,yycolumn+1,yyline+1,yytext());
            }
          case 157: break;
          case 67: 
            { return new Symbol(sym.WHILE,yycolumn+1,yyline+1,yytext());
            }
          case 158: break;
          case 68: 
            { return new Symbol(sym.FLOAT,yycolumn+1,yyline+1,yytext());
            }
          case 159: break;
          case 69: 
            { return new Symbol(sym.ACCESS,yycolumn+1,yyline+1,yytext());
            }
          case 160: break;
          case 70: 
            { return new Symbol(sym.ACCEPT,yycolumn+1,yyline+1,yytext());
            }
          case 161: break;
          case 71: 
            { return new Symbol(sym.OTHERS,yycolumn+1,yyline+1,yytext());
            }
          case 162: break;
          case 72: 
            { return new Symbol(sym.RETURN,yycolumn+1,yyline+1,yytext());
            }
          case 163: break;
          case 73: 
            { return new Symbol(sym.RECORD,yycolumn+1,yyline+1,yytext());
            }
          case 164: break;
          case 74: 
            { return new Symbol(sym.DIGITS,yycolumn+1,yyline+1,yytext());
            }
          case 165: break;
          case 75: 
            { return new Symbol(sym.SELECT,yycolumn+1,yyline+1,yytext());
            }
          case 166: break;
          case 76: 
            { return new Symbol(sym.RENAMES,yycolumn+1,yyline+1,yytext());
            }
          case 167: break;
          case 77: 
            { return new Symbol(sym.REVERSE,yycolumn+1,yyline+1,yytext());
            }
          case 168: break;
          case 78: 
            { return new Symbol(sym.DECLARE,yycolumn+1,yyline+1,yytext());
            }
          case 169: break;
          case 79: 
            { return new Symbol(sym.SUBTYPE,yycolumn+1,yyline+1,yytext());
            }
          case 170: break;
          case 80: 
            { return new Symbol(sym.GENERIC,yycolumn+1,yyline+1,yytext());
            }
          case 171: break;
          case 81: 
            { return new Symbol(sym.PACKAGE,yycolumn+1,yyline+1,yytext());
            }
          case 172: break;
          case 82: 
            { return new Symbol(sym.PRIVATE,yycolumn+1,yyline+1,yytext());
            }
          case 173: break;
          case 83: 
            { return new Symbol(sym.LIMITED,yycolumn+1,yyline+1,yytext());
            }
          case 174: break;
          case 84: 
            { return new Symbol(sym.INTEGER,yycolumn+1,yyline+1,yytext());
            }
          case 175: break;
          case 85: 
            { return new Symbol(sym.BOOLEAN,yycolumn+1,yyline+1,yytext());
            }
          case 176: break;
          case 86: 
            { return new Symbol(sym.CONSTANT,yycolumn+1,yyline+1,yytext());
            }
          case 177: break;
          case 87: 
            { return new Symbol(sym.SEPARATE,yycolumn+1,yyline+1,yytext());
            }
          case 178: break;
          case 88: 
            { return new Symbol(sym.FUNCTION,yycolumn+1,yyline+1,yytext());
            }
          case 179: break;
          case 89: 
            { return new Symbol(sym.TERMINATE,yycolumn+1,yyline+1,yytext());
            }
          case 180: break;
          case 90: 
            { return new Symbol(sym.EXCEPTION,yycolumn+1,yyline+1,yytext());
            }
          case 181: break;
          case 91: 
            { return new Symbol(sym.PROCEDURE,yycolumn+1,yyline+1,yytext());
            }
          case 182: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
