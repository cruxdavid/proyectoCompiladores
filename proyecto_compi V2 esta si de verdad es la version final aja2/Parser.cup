import java.io.*;
import java_cup.runtime.*;
import java.util.*;
import java.lang.*;

parser code {:
	
        int err = 0;
	public void syntax_error (Symbol s)
	{
            err++;
            int line = s.right;
            int column = s.left;
            System.out.println("Error sintactico encontrado en linea: " + line + " Columna: " + column + " simbolo conflictivo: " + s.value);
	}

	public void unrecovered_syntax_error (Symbol s) throws java.lang.Exception
	{
            err++;
            System.out.println("ERROR FATAL, COMPILACION NO PUDO SER TERMINADA");
	}
        
    public void PrintErrores()
    {
        System.out.println( err +" ERRORES FUERON ENCONTRADOS!!");
    }

:}

// Terminales
terminal            SUMSUBS,MULDIV,LPAR,RPAR,SEMICOLON,COMMA,DOTDOT,ABORT,AND,CASE,DIGITS,EXCEPTION,GOTO,LOOP,OF,RECORD,SELECT,THEN,WITH,ABS,ARRAY,CONSTANT,DO,EXIT,IF,MOD,OR,PRIVATE,REM,SEPARATE,TYPE,XOR,ACCEPT,AT,DECLARE,ELSE,FOR,IN,NEW,OTHERS,PROCEDURE,RENAMES,SUBTYPE,USE,ACCESS,BEGIN,DELAY,END,FUNCTION,IS,NOT,OUT,RAISE,RETURN,TASK,WHEN,ALL,BODY,DELTA,ENTRY,GENERIC,LIMITED,NULL,ELSIF,PACKAGE,RANGE,REVERSE,TERMINATE,WHILE,BOOLEAN,GET,PUT,IDENTIFIER,OPREL,ASSIGN,INTEGER,FLOAT;
terminal Integer    NUM;        // our scanner provides numbers as integers
terminal Double     REAL;

//No terminales
non terminal           procedure,sequence_of_statements,empty,arithmetic_expression,term,factor,statement,relation,
					   boolean_operation,expression,assignment_statement,simple_statement,compound_statement,
					   if_statement,condition,elsif,else,loop_statement,while_or_for,rest_of_loop,condition_part;

//Precedencias
precedence left MULDIV;
precedence left SUMSUBS;

//Gramaticas
procedure ::= PROCEDURE IDENTIFIER IS BEGIN procedure END IDENTIFIER SEMICOLON
			| PROCEDURE IDENTIFIER IS BEGIN sequence_of_statements procedure END IDENTIFIER SEMICOLON
			| empty;

sequence_of_statements ::= sequence_of_statements statement 
		| statement;

statement ::= simple_statement | compound_statement;

simple_statement ::= assignment_statement;

compound_statement ::= if_statement | loop_statement;

if_statement ::= IF condition_part elsif else END IF SEMICOLON
                |error;

elsif ::= elsif ELSIF condition_part
		|empty;

condition_part ::= condition THEN sequence_of_statements;

else ::=  ELSE sequence_of_statements
		| empty;

loop_statement ::= while_or_for;

while_or_for ::= WHILE condition rest_of_loop;

rest_of_loop ::= LOOP sequence_of_statements END LOOP SEMICOLON;

condition ::= expression;

assignment_statement ::= IDENTIFIER ASSIGN expression SEMICOLON;

expression ::= expression boolean_operation relation
			| relation;

boolean_operation ::= AND|OR|XOR;

relation ::= arithmetic_expression OPREL arithmetic_expression
			|arithmetic_expression; 

arithmetic_expression ::= arithmetic_expression SUMSUBS term
			|term;

term ::= term MULDIV factor
		|factor;

factor ::=  IDENTIFIER
		  | NUM
		  | REAL
		  | LPAR arithmetic_expression RPAR;

empty ::= /* nothing */;