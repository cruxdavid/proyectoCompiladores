import java.io.*;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ScannerBuffer;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;
import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamWriter;
import javax.xml.transform.*;
import javax.xml.transform.stream.*;
import java.util.*;
import java.lang.*;

parser code {:
	
        int err = 0;
	public void syntax_error (Symbol s)
	{
            err++;
            int line = s.right;
            int column = s.left;
            System.out.println("Syntax error near line " + line + ", column " + column + "; found: " + s.value + ".");
	}

	public void unrecovered_syntax_error (Symbol s) throws java.lang.Exception
	{
            err++;
            System.out.println("Finished. Please fix errors.");
	}
        
    public void PrintErrores()
    {
        System.out.println( err +" errors were found.");
    }

    public void report_error(String message, Object info) {
    if (info instanceof String){
	err++; 
      System.err.println("  "+ "==> " + info + " "+ message+".");
    }
    else {
    	StringBuffer m = new StringBuffer("Error ");
    	if (info instanceof java_cup.runtime.Symbol) 
     	   m.append( "("+info.toString()+")" );     
    	m.append(" : "+message);   
    	System.err.println(m);
     }
   }

	public Parser(Lexer lex, ComplexSymbolFactory sf){
		super(lex,sf);
	}

	public static void main(String[] args) throws Exception{

		ComplexSymbolFactory csf = new ComplexSymbolFactory();
		Reader rscanner;
		rscanner = new BufferedReader(new FileReader("source.txt"));
		ScannerBuffer lexer = new ScannerBuffer(new Lexer(rscanner,csf));

		Parser p = new Parser(lexer,csf);
		XMLElement e = (XMLElement)p.parse().value;

		XMLOutputFactory outFactory = XMLOutputFactory.newInstance();
		XMLStreamWriter sw = outFactory.createXMLStreamWriter(new FileOutputStream("outStream.xml"),"UTF-8");
		XMLElement.dump(lexer,sw,e,"expr","stmt");

		Transformer transformer = TransformerFactory.newInstance().newTransformer(new StreamSource(new File("tree.xsl")));
      	Source text = new StreamSource(new File("outStream.xml"));
      	transformer.transform(text, new StreamResult(new File("output.xml")));
      	transformer = TransformerFactory.newInstance().newTransformer(new StreamSource(new File("tree-view.xsl")));
      	text = new StreamSource(new File("output.xml"));
      	transformer.transform(text, new StreamResult(new File("ast.html")));

	}
:}

/* 1. Terminales */

	terminal 			PROCEDURE,RENAMES,SUBTYPE,USE,ACCESS,BEGIN,DELAY,END,FUNCTION,IS,NOT,OUT,RAISE;
	terminal            NULL,SUMSUBS,MULDIV,LPAR,RPAR,SEMICOLON,COMMA,DOTDOT,ABORT,AND,CASE,DIGITS;
	terminal            EXCEPTION,GOTO,LOOP,OF,RECORD,SELECT,THEN,WITH,ABS,ARRAY,CONSTANT,DO,EXIT,IF;
	terminal			MOD,OR,PRIVATE,REM,SEPARATE,TYPE,XOR,ACCEPT,AT,DECLARE,ELSE,FOR,IN,NEW,OTHERS;
	terminal			RETURN,TASK,WHEN,ALL,BODY,DELTA,ENTRY,GENERIC,LIMITED,NUL,ELSIF,PACKAGE,RANGE,REVERSE;
	terminal			TERMINATE,WHILE,BOOLEAN,GET,PUT,ID,OPREL,ASSIGN,INTEGER,FLOAT, COLON, PARAMASSIGN;
	terminal Integer    NUM;     
	terminal Double     REAL;

/* 2. No terminales */
	non terminal           procedure, statementsSeguidos, empty, arithmeticExpression, term, factor, statement, relation,
						   boolOp, expression, assignmentStatement, simpleStatement, statementCompuesto,
						   ifStatement, condition, elsif, else, loopStatement, forOrWhile, loopBody, conditionPart;

	non terminal 		exit_statement, return_statement, callProcedure, parameterCall, parameterList, parameter,forStatement, callFunction;

	non terminal 		subprogramDeclaration, subprogramSpecification, declBody, parameterInParenthesis, typeParam, parameterSpecification,  parameterSpecificationP, idSequence,
						mode, basicDecl, basicDeclItem, numDecl, declareAndAssign;					   
/* 3. Precedencias y Gramatica */


	precedence left MULDIV;
	precedence left SUMSUBS;

	procedure ::= PROCEDURE ID IS BEGIN procedure END ID SEMICOLON
	            | PROCEDURE ID error:e {:parser.report_error("Unexpected symbol", "Wrong procedure,");:} BEGIN statementsSeguidos procedure END ID SEMICOLON
	            | PROCEDURE error:e {:parser.report_error("Expected identifier", "Wrong procedure");:} IS BEGIN statementsSeguidos procedure END ID SEMICOLON
	            | PROCEDURE ID IS error:e {:parser.report_error("Expected begin", "Wrong procedure");:} statementsSeguidos procedure END ID SEMICOLON
	            | PROCEDURE ID IS BEGIN statementsSeguidos procedure END ID SEMICOLON
	            | empty;

	subprogramDeclaration ::= subprogramSpecification IS declBody BEGIN statementsSeguidos END ID SEMICOLON
							 | error:e {:parser.report_error("Error in subprogram declaration", "Wrong declaration");:} IS declBody BEGIN statementsSeguidos END ID SEMICOLON
							 | subprogramSpecification error:e{:parser.report_error("IS expected", "Wrong declaration");:} declBody BEGIN statementsSeguidos END ID SEMICOLON;

    subprogramSpecification ::= PROCEDURE ID parameterInParenthesis
    							| error:e{:parser.report_error("Error in subprogram specification", "Wrong declaration");:} ID parameterInParenthesis
                                | FUNCTION ID parameterInParenthesis error:e{:parser.report_error("Missing return", "Wrong declaration");:} typeParam
                                | FUNCTION ID parameterInParenthesis RETURN typeParam;

    parameterInParenthesis ::= LPAR parameterSpecification RPAR
    			   | LPAR parameterSpecification error:e{:parser.report_error("Missing right parenthesis", "Wrong");:}
    			   | empty;

    parameterSpecification ::= parameterSpecification SEMICOLON parameterSpecificationP  | parameterSpecificationP;

    parameterSpecificationP ::= idSequence COLON mode typeParam;

    idSequence ::= idSequence COMMA ID | ID;

    mode ::= IN | OUT | IN OUT | empty;

    typeParam ::= BOOLEAN | FLOAT | INTEGER;

    declBody ::= basicDeclItem | empty;

    basicDeclItem ::=  basicDeclItem basicDecl |  basicDecl;
    
    basicDecl ::= subprogramDeclaration | numDecl;

    numDecl ::= idSequence COLON typeParam declareAndAssign SEMICOLON;

    declareAndAssign ::= ASSIGN expression | empty;

	statementsSeguidos ::= statementsSeguidos statement 
			| statement;

	statement ::= simpleStatement | statementCompuesto ;

	simpleStatement ::= assignmentStatement
						| return_statement
						| exit_statement
						| callProcedure;

	statementCompuesto ::= ifStatement 
						| loopStatement;


	loopStatement ::= forOrWhile
					  | forStatement;

	forOrWhile ::= WHILE condition loopBody
					| error:e{:parser.report_error("Missing While", "Wrong while");:} condition loopBody; 

	loopBody ::= LOOP statementsSeguidos END LOOP SEMICOLON
	                | LOOP error:e {: parser.report_error("Loop error", "Wrong loop");:} END LOOP SEMICOLON
	                | LOOP statementsSeguidos error:e {: parser.report_error("Missing end", "Wrong loop");:} LOOP SEMICOLON
	                | LOOP statementsSeguidos END error:e {: parser.report_error("Missing loop", "Wrong loop");:} SEMICOLON
	                | error statementsSeguidos END LOOP SEMICOLON;

						
	ifStatement ::=   IF conditionPart elsif else END IF SEMICOLON              
	                 | IF conditionPart elsif else END error:e {: parser.report_error("Missing if", "Wrong if statement");:} SEMICOLON;

	elsif ::= elsif ELSIF conditionPart
			| elsif ELSIF error:e{:parser.report_error("Error in condition", "Wrong elseif");:}
			| empty;

	conditionPart ::= condition THEN statementsSeguidos
					| error:e {: parser.report_error("Error in condition", "Wrong condition");:} THEN statementsSeguidos
					| condition error:e {: parser.report_error("Missing then", "Wrong condition");:} statementsSeguidos;

	else ::=  ELSE statementsSeguidos
			| empty;


	condition ::= expression;


	assignmentStatement ::= ID ASSIGN expression SEMICOLON
							| ID ASSIGN error:e {:parser.report_error("Assignment error", "Wrong assignment");:} SEMICOLON
							| ID error:e {:parser.report_error("Assignment error", "Wrong assignment");:} expression SEMICOLON
							| error:e {:parser.report_error("Missing identifier", "Wrong assignment");:} ASSIGN expression SEMICOLON
							| ID ASSIGN expression error:e {:parser.report_error("Missing semicolon", "Wrong assignment");:};

	expression ::= expression boolOp relation
				| error:e {:parser.report_error("Error in expression", "Wrong"); :} boolOp relation
				| expression boolOp error:e {:parser.report_error("Error in bool operation", "Wrong"); :}
				| relation;

	boolOp ::= AND|OR|XOR;


	relation ::= arithmeticExpression OPREL arithmeticExpression
				| arithmeticExpression OPREL error:e {:parser.report_error("Error in the arithmetic expression", "Wrong relation"); :}
				| arithmeticExpression; 


	arithmeticExpression ::= arithmeticExpression SUMSUBS term
				| arithmeticExpression SUMSUBS error:e {:parser.report_error("Error in arithmetic expresion", "Wrong expression"); :}
				| term;

	term ::= term MULDIV factor
			| term MULDIV error:e {:parser.report_error("Expected a factor after mult or div", "Wrong term/factor"); :}
			| factor ;

	factor ::=  ID
			  | NUM
			  | REAL
			  | LPAR expression RPAR
	          | LPAR error:e {: parser.report_error("Error in the expression", "Wrong factor");:} RPAR 
	          | LPAR expression error:e {: parser.report_error("Parenthesis not closed", "Wrong factor in parenthesis");:};

	return_statement ::= RETURN SEMICOLON
						| RETURN expression SEMICOLON
						| RETURN error:e {:parser.report_error("Missing return statement", "Wrong return");:} SEMICOLON;

	exit_statement ::= EXIT SEMICOLON
					| EXIT ID SEMICOLON 
					| EXIT ID WHEN condition SEMICOLON
					| EXIT error:e{:parser.report_error("Missing identifier", "Wrong exit statement");:} WHEN condition SEMICOLON
					| EXIT ID error:e{:parser.report_error("Missing when", "Wrong exit statement");:} condition SEMICOLON
					| EXIT ID WHEN error:e{:parser.report_error("Error in when condition", "Wrong exit statement");:} SEMICOLON;

	callProcedure ::= ID SEMICOLON
								| ID parameterCall SEMICOLON;

	parameterCall ::= LPAR parameterList RPAR
							| LPAR parameterList error:e{:parser.report_error("Missing right parenthesis", "Wrong parameter");:};

	
	parameterList ::= parameterList COMMA parameter
							| parameterList error:e{:parser.report_error("Missing comma", "Wrong parameter");:} parameter
							| parameter;

	parameter ::= ID PARAMASSIGN expression 
				| expression;

	callFunction ::= ID parameterCall;

	forStatement ::= FOR ID IN expression DOTDOT expression LOOP statementsSeguidos END LOOP SEMICOLON
					| FOR ID error:e{:parser.report_error("Expected In", "Wrong for statement");:} expression DOTDOT expression LOOP statementsSeguidos END LOOP SEMICOLON 
					| FOR ID IN error:e{:parser.report_error("Error in expression", "Wrong for statement");:} DOTDOT expression LOOP statementsSeguidos END LOOP SEMICOLON 
					| FOR ID IN expression error:e{:parser.report_error("Missing ellipsis", "Wrong for statement");:} expression LOOP statementsSeguidos END LOOP SEMICOLON 
					| FOR ID IN expression DOTDOT error:e{:parser.report_error("Error in expression", "Wrong for statement");:} LOOP statementsSeguidos END LOOP SEMICOLON 
					| FOR ID IN expression DOTDOT expression error:e{:parser.report_error("Missing loop statement", "Wrong for statement");:} statementsSeguidos END LOOP SEMICOLON 
					| FOR ID IN expression DOTDOT expression LOOP statementsSeguidos error:e{:parser.report_error("Missing end", "Wrong for statement");:} LOOP SEMICOLON 
					| FOR ID IN expression DOTDOT expression LOOP statementsSeguidos END error:e{:parser.report_error("Missing loop", "Wrong for statement");:} SEMICOLON; 

	empty ::= /* epsilon! */;