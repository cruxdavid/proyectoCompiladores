
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

import java.io.*;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ScannerBuffer;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;
import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamWriter;
import javax.xml.transform.*;
import javax.xml.transform.stream.*;
import java.util.*;
import java.lang.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\232\000\002\002\012\000\002\002\004\000\002\054" +
    "\002\000\002\002\014\000\002\055\002\000\002\002\014" +
    "\000\002\056\002\000\002\002\014\000\002\002\013\000" +
    "\002\002\003\000\002\037\012\000\002\057\002\000\002" +
    "\037\013\000\002\060\002\000\002\037\013\000\002\040" +
    "\005\000\002\061\002\000\002\040\006\000\002\062\002" +
    "\000\002\040\010\000\002\040\007\000\002\042\005\000" +
    "\002\042\005\000\002\042\003\000\002\044\005\000\002" +
    "\044\003\000\002\045\006\000\002\046\005\000\002\046" +
    "\003\000\002\047\003\000\002\047\003\000\002\047\004" +
    "\000\002\047\003\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\041\003\000\002\041\003\000\002" +
    "\051\004\000\002\051\003\000\002\050\003\000\002\050" +
    "\003\000\002\052\007\000\002\053\004\000\002\053\003" +
    "\000\002\003\004\000\002\003\003\000\002\010\003\000" +
    "\002\010\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\016\003\000\002\016" +
    "\003\000\002\023\003\000\002\023\003\000\002\024\005" +
    "\000\002\063\002\000\002\024\006\000\002\025\007\000" +
    "\002\064\002\000\002\025\010\000\002\065\002\000\002" +
    "\025\010\000\002\066\002\000\002\025\010\000\002\025" +
    "\007\000\002\017\011\000\002\067\002\000\002\017\012" +
    "\000\002\021\005\000\002\021\005\000\002\021\003\000" +
    "\002\026\005\000\002\070\002\000\002\026\006\000\002" +
    "\071\002\000\002\026\006\000\002\022\004\000\002\022" +
    "\003\000\002\020\003\000\002\014\006\000\002\072\002" +
    "\000\002\014\007\000\002\073\002\000\002\014\007\000" +
    "\002\074\002\000\002\014\007\000\002\014\006\000\002" +
    "\013\005\000\002\075\002\000\002\013\006\000\002\013" +
    "\005\000\002\013\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\011\005\000\002\011\005\000" +
    "\002\011\003\000\002\005\005\000\002\005\005\000\002" +
    "\005\003\000\002\006\005\000\002\006\005\000\002\006" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\005\000\002\076\002\000\002\007\006\000" +
    "\002\007\005\000\002\030\004\000\002\030\005\000\002" +
    "\077\002\000\002\030\006\000\002\027\004\000\002\027" +
    "\005\000\002\027\007\000\002\100\002\000\002\027\010" +
    "\000\002\101\002\000\002\027\010\000\002\102\002\000" +
    "\002\027\010\000\002\031\004\000\002\031\005\000\002" +
    "\032\005\000\002\032\005\000\002\033\005\000\002\103" +
    "\002\000\002\033\006\000\002\033\003\000\002\034\005" +
    "\000\002\034\003\000\002\036\004\000\002\035\015\000" +
    "\002\104\002\000\002\035\016\000\002\105\002\000\002" +
    "\035\016\000\002\106\002\000\002\035\016\000\002\107" +
    "\002\000\002\035\016\000\002\110\002\000\002\035\016" +
    "\000\002\111\002\000\002\035\016\000\002\112\002\000" +
    "\002\035\016\000\002\004\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0103\000\006\002\uff68\004\004\001\002\000\006\003" +
    "\011\115\010\001\002\000\004\002\007\001\002\000\006" +
    "\002\ufff8\013\ufff8\001\002\000\004\002\000\001\002\000" +
    "\006\003\354\015\355\001\002\000\004\015\ufffd\001\002" +
    "\000\004\015\013\001\002\000\004\011\014\001\002\000" +
    "\020\003\034\051\015\052\026\066\036\072\024\111\022" +
    "\115\027\001\002\000\010\003\334\026\333\115\332\001" +
    "\002\000\030\003\uffd3\004\uffd3\013\uffd3\051\uffd3\052\uffd3" +
    "\065\uffd3\066\uffd3\072\uffd3\104\uffd3\111\uffd3\115\uffd3\001" +
    "\002\000\030\003\uffd0\004\uffd0\013\uffd0\051\uffd0\052\uffd0" +
    "\065\uffd0\066\uffd0\072\uffd0\104\uffd0\111\uffd0\115\uffd0\001" +
    "\002\000\030\003\uffcd\004\uffcd\013\uffcd\051\uffcd\052\uffcd" +
    "\065\uffcd\066\uffcd\072\uffcd\104\uffcd\111\uffcd\115\uffcd\001" +
    "\002\000\030\003\uffd1\004\uffd1\013\uffd1\051\uffd1\052\uffd1" +
    "\065\uffd1\066\uffd1\072\uffd1\104\uffd1\111\uffd1\115\uffd1\001" +
    "\002\000\014\003\054\024\047\115\051\124\044\125\053" +
    "\001\002\000\030\003\uffd2\004\uffd2\013\uffd2\051\uffd2\052" +
    "\uffd2\065\uffd2\066\uffd2\072\uffd2\104\uffd2\111\uffd2\115\uffd2" +
    "\001\002\000\016\003\323\024\047\026\324\115\051\124" +
    "\044\125\053\001\002\000\030\003\uffca\004\uffca\013\uffca" +
    "\051\uffca\052\uffca\065\uffca\066\uffca\072\uffca\104\uffca\111" +
    "\uffca\115\uffca\001\002\000\014\003\271\024\047\115\051" +
    "\124\044\125\053\001\002\000\012\003\236\024\240\026" +
    "\235\117\241\001\002\000\030\003\uffcb\004\uffcb\013\uffcb" +
    "\051\uffcb\052\uffcb\065\uffcb\066\uffcb\072\uffcb\104\uffcb\111" +
    "\uffcb\115\uffcb\001\002\000\030\003\uffcc\004\uffcc\013\uffcc" +
    "\051\uffcc\052\uffcc\065\uffcc\066\uffcc\072\uffcc\104\uffcc\111" +
    "\uffcc\115\uffcc\001\002\000\024\003\034\004\004\013\uff68" +
    "\051\015\052\026\066\036\072\024\111\022\115\027\001" +
    "\002\000\030\003\uffc9\004\uffc9\013\uffc9\051\uffc9\052\uffc9" +
    "\065\uffc9\066\uffc9\072\uffc9\104\uffc9\111\uffc9\115\uffc9\001" +
    "\002\000\016\003\uffc7\024\uffc7\115\uffc7\117\uffaa\124\uffc7" +
    "\125\uffc7\001\002\000\030\003\uffce\004\uffce\013\uffce\051" +
    "\uffce\052\uffce\065\uffce\066\uffce\072\uffce\104\uffce\111\uffce" +
    "\115\uffce\001\002\000\004\115\040\001\002\000\030\003" +
    "\uffcf\004\uffcf\013\uffcf\051\uffcf\052\uffcf\065\uffcf\066\uffcf" +
    "\072\uffcf\104\uffcf\111\uffcf\115\uffcf\001\002\000\006\003" +
    "\042\067\041\001\002\000\014\003\117\024\047\115\051" +
    "\124\044\125\053\001\002\000\014\003\uff76\024\uff76\115" +
    "\uff76\124\uff76\125\uff76\001\002\000\014\003\054\024\047" +
    "\115\051\124\044\125\053\001\002\000\034\003\uff95\022" +
    "\uff95\023\uff95\025\uff95\026\uff95\027\uff95\030\uff95\032\uff95" +
    "\037\uff95\043\uff95\054\uff95\061\uff95\116\uff95\001\002\000" +
    "\026\003\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\032\uffa3" +
    "\037\uffa3\043\uffa3\054\uffa3\061\uffa3\001\002\000\034\003" +
    "\uff9a\022\uff9a\023\062\025\uff9a\026\uff9a\027\uff9a\030\uff9a" +
    "\032\uff9a\037\uff9a\043\uff9a\054\uff9a\061\uff9a\116\uff9a\001" +
    "\002\000\014\003\111\024\047\115\051\124\044\125\053" +
    "\001\002\000\012\030\076\032\070\054\073\061\072\001" +
    "\002\000\034\003\uff96\022\uff96\023\uff96\025\uff96\026\uff96" +
    "\027\uff96\030\uff96\032\uff96\037\uff96\043\uff96\054\uff96\061" +
    "\uff96\116\uff96\001\002\000\034\003\uff97\022\uff97\023\uff97" +
    "\025\uff97\026\uff97\027\uff97\030\uff97\032\uff97\037\uff97\043" +
    "\uff97\054\uff97\061\uff97\116\uff97\001\002\000\034\003\uff94" +
    "\022\uff94\023\uff94\025\uff94\026\uff94\027\uff94\030\uff94\032" +
    "\uff94\037\uff94\043\uff94\054\uff94\061\uff94\116\uff94\001\002" +
    "\000\010\032\uffa6\054\uffa6\061\uffa6\001\002\000\032\003" +
    "\uff9d\022\057\025\uff9d\026\uff9d\027\uff9d\030\uff9d\032\uff9d" +
    "\037\uff9d\043\uff9d\054\uff9d\061\uff9d\116\056\001\002\000" +
    "\014\003\066\024\047\115\051\124\044\125\053\001\002" +
    "\000\014\003\060\024\047\115\051\124\044\125\053\001" +
    "\002\000\032\003\uff9b\022\uff9b\025\uff9b\026\uff9b\027\uff9b" +
    "\030\uff9b\032\uff9b\037\uff9b\043\uff9b\054\uff9b\061\uff9b\116" +
    "\uff9b\001\002\000\034\003\uff9c\022\uff9c\023\062\025\uff9c" +
    "\026\uff9c\027\uff9c\030\uff9c\032\uff9c\037\uff9c\043\uff9c\054" +
    "\uff9c\061\uff9c\116\uff9c\001\002\000\014\003\063\024\047" +
    "\115\051\124\044\125\053\001\002\000\034\003\uff98\022" +
    "\uff98\023\uff98\025\uff98\026\uff98\027\uff98\030\uff98\032\uff98" +
    "\037\uff98\043\uff98\054\uff98\061\uff98\116\uff98\001\002\000" +
    "\034\003\uff99\022\uff99\023\uff99\025\uff99\026\uff99\027\uff99" +
    "\030\uff99\032\uff99\037\uff99\043\uff99\054\uff99\061\uff99\116" +
    "\uff99\001\002\000\030\003\uff9f\022\057\025\uff9f\026\uff9f" +
    "\027\uff9f\030\uff9f\032\uff9f\037\uff9f\043\uff9f\054\uff9f\061" +
    "\uff9f\001\002\000\026\003\uff9e\025\uff9e\026\uff9e\027\uff9e" +
    "\030\uff9e\032\uff9e\037\uff9e\043\uff9e\054\uff9e\061\uff9e\001" +
    "\002\000\010\032\070\054\073\061\072\001\002\000\014" +
    "\003\uffa2\024\uffa2\115\uffa2\124\uffa2\125\uffa2\001\002\000" +
    "\012\024\047\115\051\124\044\125\053\001\002\000\014" +
    "\003\uffa0\024\uffa0\115\uffa0\124\uffa0\125\uffa0\001\002\000" +
    "\014\003\uffa1\024\uffa1\115\uffa1\124\uffa1\125\uffa1\001\002" +
    "\000\026\003\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\032" +
    "\uffa5\037\uffa5\043\uffa5\054\uffa5\061\uffa5\001\002\000\014" +
    "\003\107\024\047\115\051\124\044\125\053\001\002\000" +
    "\014\003\054\024\047\115\051\124\044\125\053\001\002" +
    "\000\012\032\070\037\100\054\073\061\072\001\002\000" +
    "\020\003\034\051\015\052\026\066\036\072\024\111\022" +
    "\115\027\001\002\000\022\003\034\013\103\051\015\052" +
    "\026\066\036\072\024\111\022\115\027\001\002\000\030" +
    "\003\uffd4\004\uffd4\013\uffd4\051\uffd4\052\uffd4\065\uffd4\066" +
    "\uffd4\072\uffd4\104\uffd4\111\uffd4\115\uffd4\001\002\000\004" +
    "\037\104\001\002\000\004\026\105\001\002\000\030\003" +
    "\uff75\004\uff75\013\uff75\051\uff75\052\uff75\065\uff75\066\uff75" +
    "\072\uff75\104\uff75\111\uff75\115\uff75\001\002\000\026\003" +
    "\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\032\uffa7\037\uffa7" +
    "\043\uffa7\054\uffa7\061\uffa7\001\002\000\026\003\uffa4\025" +
    "\uffa4\026\uffa4\027\uffa4\030\uffa4\032\uffa4\037\uffa4\043\uffa4" +
    "\054\uffa4\061\uffa4\001\002\000\014\003\114\025\115\032" +
    "\070\054\073\061\072\001\002\000\012\025\uff92\032\uffa6" +
    "\054\uffa6\061\uffa6\001\002\000\004\025\113\001\002\000" +
    "\034\003\uff91\022\uff91\023\uff91\025\uff91\026\uff91\027\uff91" +
    "\030\uff91\032\uff91\037\uff91\043\uff91\054\uff91\061\uff91\116" +
    "\uff91\001\002\000\034\003\uff90\022\uff90\023\uff90\025\uff90" +
    "\026\uff90\027\uff90\030\uff90\032\uff90\037\uff90\043\uff90\054" +
    "\uff90\061\uff90\116\uff90\001\002\000\034\003\uff93\022\uff93" +
    "\023\uff93\025\uff93\026\uff93\027\uff93\030\uff93\032\uff93\037" +
    "\uff93\043\uff93\054\uff93\061\uff93\116\uff93\001\002\000\014" +
    "\003\130\030\131\032\070\054\073\061\072\001\002\000" +
    "\012\030\uff74\032\uffa6\054\uffa6\061\uffa6\001\002\000\004" +
    "\030\121\001\002\000\014\003\054\024\047\115\051\124" +
    "\044\125\053\001\002\000\012\032\070\037\123\054\073" +
    "\061\072\001\002\000\020\003\034\051\015\052\026\066" +
    "\036\072\024\111\022\115\027\001\002\000\022\003\034" +
    "\013\125\051\015\052\026\066\036\072\024\111\022\115" +
    "\027\001\002\000\004\037\126\001\002\000\004\026\127" +
    "\001\002\000\030\003\uff73\004\uff73\013\uff73\051\uff73\052" +
    "\uff73\065\uff73\066\uff73\072\uff73\104\uff73\111\uff73\115\uff73" +
    "\001\002\000\014\003\uff72\024\uff72\115\uff72\124\uff72\125" +
    "\uff72\001\002\000\014\003\133\024\047\115\051\124\044" +
    "\125\053\001\002\000\014\003\142\032\070\037\143\054" +
    "\073\061\072\001\002\000\012\032\uffa6\037\uff70\054\uffa6" +
    "\061\uffa6\001\002\000\004\037\135\001\002\000\020\003" +
    "\034\051\015\052\026\066\036\072\024\111\022\115\027" +
    "\001\002\000\022\003\034\013\137\051\015\052\026\066" +
    "\036\072\024\111\022\115\027\001\002\000\004\037\140" +
    "\001\002\000\004\026\141\001\002\000\030\003\uff6f\004" +
    "\uff6f\013\uff6f\051\uff6f\052\uff6f\065\uff6f\066\uff6f\072\uff6f" +
    "\104\uff6f\111\uff6f\115\uff6f\001\002\000\020\003\uff6e\051" +
    "\uff6e\052\uff6e\066\uff6e\072\uff6e\111\uff6e\115\uff6e\001\002" +
    "\000\020\003\034\051\015\052\026\066\036\072\024\111" +
    "\022\115\027\001\002\000\022\003\146\013\145\051\015" +
    "\052\026\066\036\072\024\111\022\115\027\001\002\000" +
    "\006\003\210\037\211\001\002\000\020\003\uffc7\024\uffc7" +
    "\037\uff6c\115\uffc7\117\uffaa\124\uffc7\125\uffc7\001\002\000" +
    "\004\037\206\001\002\000\004\117\203\001\002\000\014" +
    "\003\054\024\047\115\051\124\044\125\053\001\002\000" +
    "\006\003\154\037\155\001\002\000\020\003\uffb0\026\uffb0" +
    "\032\070\037\uffb0\043\uffb0\054\073\061\072\001\002\000" +
    "\020\003\034\051\015\052\026\066\036\072\024\111\022" +
    "\115\027\001\002\000\020\003\160\051\015\052\026\066" +
    "\036\072\024\111\022\115\027\001\002\000\030\003\uffc6" +
    "\004\uffc6\013\uffc6\051\uffc6\052\uffc6\065\uffc6\066\uffc6\072" +
    "\uffc6\104\uffc6\111\uffc6\115\uffc6\001\002\000\022\003\166" +
    "\013\165\051\015\052\026\066\036\072\024\111\022\115" +
    "\027\001\002\000\020\003\uffc7\013\uffc4\024\uffc7\115\uffc7" +
    "\117\uffaa\124\uffc7\125\uffc7\001\002\000\004\013\162\001" +
    "\002\000\004\037\163\001\002\000\004\026\164\001\002" +
    "\000\030\003\uffc3\004\uffc3\013\uffc3\051\uffc3\052\uffc3\065" +
    "\uffc3\066\uffc3\072\uffc3\104\uffc3\111\uffc3\115\uffc3\001\002" +
    "\000\006\003\172\037\173\001\002\000\020\003\uffc7\024" +
    "\uffc7\037\uffc2\115\uffc7\117\uffaa\124\uffc7\125\uffc7\001\002" +
    "\000\004\037\170\001\002\000\004\026\171\001\002\000" +
    "\030\003\uffc1\004\uffc1\013\uffc1\051\uffc1\052\uffc1\065\uffc1" +
    "\066\uffc1\072\uffc1\104\uffc1\111\uffc1\115\uffc1\001\002\000" +
    "\004\026\uffc0\001\002\000\004\026\174\001\002\000\030" +
    "\003\uffc5\004\uffc5\013\uffc5\051\uffc5\052\uffc5\065\uffc5\066" +
    "\uffc5\072\uffc5\104\uffc5\111\uffc5\115\uffc5\001\002\000\004" +
    "\026\176\001\002\000\030\003\uffbf\004\uffbf\013\uffbf\051" +
    "\uffbf\052\uffbf\065\uffbf\066\uffbf\072\uffbf\104\uffbf\111\uffbf" +
    "\115\uffbf\001\002\000\022\003\034\013\200\051\015\052" +
    "\026\066\036\072\024\111\022\115\027\001\002\000\004" +
    "\037\201\001\002\000\004\026\202\001\002\000\030\003" +
    "\uffbe\004\uffbe\013\uffbe\051\uffbe\052\uffbe\065\uffbe\066\uffbe" +
    "\072\uffbe\104\uffbe\111\uffbe\115\uffbe\001\002\000\014\003" +
    "\054\024\047\115\051\124\044\125\053\001\002\000\012" +
    "\026\205\032\070\054\073\061\072\001\002\000\030\003" +
    "\uffa9\004\uffa9\013\uffa9\051\uffa9\052\uffa9\065\uffa9\066\uffa9" +
    "\072\uffa9\104\uffa9\111\uffa9\115\uffa9\001\002\000\004\026" +
    "\207\001\002\000\030\003\uff6b\004\uff6b\013\uff6b\051\uff6b" +
    "\052\uff6b\065\uff6b\066\uff6b\072\uff6b\104\uff6b\111\uff6b\115" +
    "\uff6b\001\002\000\004\026\uff6a\001\002\000\004\026\212" +
    "\001\002\000\030\003\uff77\004\uff77\013\uff77\051\uff77\052" +
    "\uff77\065\uff77\066\uff77\072\uff77\104\uff77\111\uff77\115\uff77" +
    "\001\002\000\004\026\214\001\002\000\030\003\uff69\004" +
    "\uff69\013\uff69\051\uff69\052\uff69\065\uff69\066\uff69\072\uff69" +
    "\104\uff69\111\uff69\115\uff69\001\002\000\020\003\034\051" +
    "\015\052\026\066\036\072\024\111\022\115\027\001\002" +
    "\000\022\003\034\013\217\051\015\052\026\066\036\072" +
    "\024\111\022\115\027\001\002\000\004\037\220\001\002" +
    "\000\004\026\221\001\002\000\030\003\uff6d\004\uff6d\013" +
    "\uff6d\051\uff6d\052\uff6d\065\uff6d\066\uff6d\072\uff6d\104\uff6d" +
    "\111\uff6d\115\uff6d\001\002\000\014\003\054\024\047\115" +
    "\051\124\044\125\053\001\002\000\012\032\070\037\224" +
    "\054\073\061\072\001\002\000\020\003\034\051\015\052" +
    "\026\066\036\072\024\111\022\115\027\001\002\000\022" +
    "\003\034\013\226\051\015\052\026\066\036\072\024\111" +
    "\022\115\027\001\002\000\004\037\227\001\002\000\004" +
    "\026\230\001\002\000\030\003\uff71\004\uff71\013\uff71\051" +
    "\uff71\052\uff71\065\uff71\066\uff71\072\uff71\104\uff71\111\uff71" +
    "\115\uff71\001\002\000\004\013\232\001\002\000\004\115" +
    "\233\001\002\000\004\026\234\001\002\000\006\002\ufffc" +
    "\013\ufffc\001\002\000\030\003\uff82\004\uff82\013\uff82\051" +
    "\uff82\052\uff82\065\uff82\066\uff82\072\uff82\104\uff82\111\uff82" +
    "\115\uff82\001\002\000\014\003\uffac\024\uffac\115\uffac\124" +
    "\uffac\125\uffac\001\002\000\004\026\264\001\002\000\014" +
    "\003\054\024\047\115\252\124\044\125\053\001\002\000" +
    "\014\003\243\024\047\115\051\124\044\125\053\001\002" +
    "\000\014\003\247\026\246\032\070\054\073\061\072\001" +
    "\002\000\012\026\uffae\032\uffa6\054\uffa6\061\uffa6\001\002" +
    "\000\004\026\245\001\002\000\030\003\uffad\004\uffad\013" +
    "\uffad\051\uffad\052\uffad\065\uffad\066\uffad\072\uffad\104\uffad" +
    "\111\uffad\115\uffad\001\002\000\030\003\uffaf\004\uffaf\013" +
    "\uffaf\051\uffaf\052\uffaf\065\uffaf\066\uffaf\072\uffaf\104\uffaf" +
    "\111\uffaf\115\uffaf\001\002\000\030\003\uffa8\004\uffa8\013" +
    "\uffa8\051\uffa8\052\uffa8\065\uffa8\066\uffa8\072\uffa8\104\uffa8" +
    "\111\uffa8\115\uffa8\001\002\000\010\003\257\025\260\027" +
    "\256\001\002\000\016\003\uff79\025\uff79\027\uff79\032\070" +
    "\054\073\061\072\001\002\000\026\003\uff96\022\uff96\023" +
    "\uff96\025\uff96\027\uff96\032\uff96\054\uff96\061\uff96\116\uff96" +
    "\123\254\001\002\000\010\003\uff7b\025\uff7b\027\uff7b\001" +
    "\002\000\014\003\054\024\047\115\051\124\044\125\053" +
    "\001\002\000\016\003\uff7a\025\uff7a\027\uff7a\032\070\054" +
    "\073\061\072\001\002\000\014\003\054\024\047\115\252" +
    "\124\044\125\053\001\002\000\016\003\uff7d\024\uff7d\026" +
    "\uff7f\115\uff7d\124\uff7d\125\uff7d\001\002\000\004\026\uff80" +
    "\001\002\000\014\003\054\024\047\115\252\124\044\125" +
    "\053\001\002\000\010\003\uff7c\025\uff7c\027\uff7c\001\002" +
    "\000\010\003\uff7e\025\uff7e\027\uff7e\001\002\000\030\003" +
    "\uff81\004\uff81\013\uff81\051\uff81\052\uff81\065\uff81\066\uff81" +
    "\072\uff81\104\uff81\111\uff81\115\uff81\001\002\000\014\003" +
    "\054\024\047\115\051\124\044\125\053\001\002\000\012" +
    "\026\267\032\070\054\073\061\072\001\002\000\030\003" +
    "\uffab\004\uffab\013\uffab\051\uffab\052\uffab\065\uffab\066\uffab" +
    "\072\uffab\104\uffab\111\uffab\115\uffab\001\002\000\006\003" +
    "\316\043\315\001\002\000\012\032\uffa6\043\uffb6\054\uffa6" +
    "\061\uffa6\001\002\000\010\013\uff68\065\uff68\104\uff68\001" +
    "\002\000\010\013\uff68\065\275\104\276\001\002\000\010" +
    "\013\uffb8\065\uffb8\104\uffb8\001\002\000\020\003\034\051" +
    "\015\052\026\066\036\072\024\111\022\115\027\001\002" +
    "\000\014\003\307\024\047\115\051\124\044\125\053\001" +
    "\002\000\004\013\uffb1\001\002\000\004\013\301\001\002" +
    "\000\006\003\302\052\303\001\002\000\004\026\uffbc\001" +
    "\002\000\004\026\304\001\002\000\030\003\uffbd\004\uffbd" +
    "\013\uffbd\051\uffbd\052\uffbd\065\uffbd\066\uffbd\072\uffbd\104" +
    "\uffbd\111\uffbd\115\uffbd\001\002\000\004\026\306\001\002" +
    "\000\030\003\uffbb\004\uffbb\013\uffbb\051\uffbb\052\uffbb\065" +
    "\uffbb\066\uffbb\072\uffbb\104\uffbb\111\uffbb\115\uffbb\001\002" +
    "\000\020\013\uffb9\032\uffa6\043\uffb6\054\uffa6\061\uffa6\065" +
    "\uffb9\104\uffb9\001\002\000\010\013\uffba\065\uffba\104\uffba" +
    "\001\002\000\004\043\312\001\002\000\020\003\034\051" +
    "\015\052\026\066\036\072\024\111\022\115\027\001\002" +
    "\000\026\003\034\013\uffb5\051\015\052\026\065\uffb5\066" +
    "\036\072\024\104\uffb5\111\022\115\027\001\002\000\022" +
    "\003\034\013\uffb2\051\015\052\026\066\036\072\024\111" +
    "\022\115\027\001\002\000\020\003\034\051\015\052\026" +
    "\066\036\072\024\111\022\115\027\001\002\000\020\003" +
    "\uffb4\051\uffb4\052\uffb4\066\uffb4\072\uffb4\111\uffb4\115\uffb4" +
    "\001\002\000\020\003\034\051\015\052\026\066\036\072" +
    "\024\111\022\115\027\001\002\000\026\003\034\013\uffb3" +
    "\051\015\052\026\065\uffb3\066\036\072\024\104\uffb3\111" +
    "\022\115\027\001\002\000\026\003\034\013\uffb7\051\015" +
    "\052\026\065\uffb7\066\036\072\024\104\uffb7\111\022\115" +
    "\027\001\002\000\012\026\327\032\070\054\073\061\072" +
    "\001\002\000\012\026\uff8d\032\uffa6\054\uffa6\061\uffa6\001" +
    "\002\000\030\003\uff8f\004\uff8f\013\uff8f\051\uff8f\052\uff8f" +
    "\065\uff8f\066\uff8f\072\uff8f\104\uff8f\111\uff8f\115\uff8f\001" +
    "\002\000\004\026\326\001\002\000\030\003\uff8c\004\uff8c" +
    "\013\uff8c\051\uff8c\052\uff8c\065\uff8c\066\uff8c\072\uff8c\104" +
    "\uff8c\111\uff8c\115\uff8c\001\002\000\030\003\uff8e\004\uff8e" +
    "\013\uff8e\051\uff8e\052\uff8e\065\uff8e\066\uff8e\072\uff8e\104" +
    "\uff8e\111\uff8e\115\uff8e\001\002\000\006\003\154\037\155" +
    "\001\002\000\030\003\uffc8\004\uffc8\013\uffc8\051\uffc8\052" +
    "\uffc8\065\uffc8\066\uffc8\072\uffc8\104\uffc8\111\uffc8\115\uffc8" +
    "\001\002\000\010\003\342\026\341\074\343\001\002\000" +
    "\030\003\uff8b\004\uff8b\013\uff8b\051\uff8b\052\uff8b\065\uff8b" +
    "\066\uff8b\072\uff8b\104\uff8b\111\uff8b\115\uff8b\001\002\000" +
    "\004\074\uff88\001\002\000\004\074\336\001\002\000\014" +
    "\003\054\024\047\115\051\124\044\125\053\001\002\000" +
    "\004\026\340\001\002\000\030\003\uff87\004\uff87\013\uff87" +
    "\051\uff87\052\uff87\065\uff87\066\uff87\072\uff87\104\uff87\111" +
    "\uff87\115\uff87\001\002\000\030\003\uff8a\004\uff8a\013\uff8a" +
    "\051\uff8a\052\uff8a\065\uff8a\066\uff8a\072\uff8a\104\uff8a\111" +
    "\uff8a\115\uff8a\001\002\000\014\003\uff86\024\uff86\115\uff86" +
    "\124\uff86\125\uff86\001\002\000\014\003\345\024\047\115" +
    "\051\124\044\125\053\001\002\000\004\026\350\001\002" +
    "\000\012\026\uff84\032\uffa6\054\uffa6\061\uffa6\001\002\000" +
    "\004\026\347\001\002\000\030\003\uff83\004\uff83\013\uff83" +
    "\051\uff83\052\uff83\065\uff83\066\uff83\072\uff83\104\uff83\111" +
    "\uff83\115\uff83\001\002\000\030\003\uff89\004\uff89\013\uff89" +
    "\051\uff89\052\uff89\065\uff89\066\uff89\072\uff89\104\uff89\111" +
    "\uff89\115\uff89\001\002\000\014\003\054\024\047\115\051" +
    "\124\044\125\053\001\002\000\004\026\353\001\002\000" +
    "\030\003\uff85\004\uff85\013\uff85\051\uff85\052\uff85\065\uff85" +
    "\066\uff85\072\uff85\104\uff85\111\uff85\115\uff85\001\002\000" +
    "\004\011\uffff\001\002\000\006\003\356\011\357\001\002" +
    "\000\020\003\ufffb\051\ufffb\052\ufffb\066\ufffb\072\ufffb\111" +
    "\ufffb\115\ufffb\001\002\000\024\003\034\004\004\013\uff68" +
    "\051\015\052\026\066\036\072\024\111\022\115\027\001" +
    "\002\000\004\013\366\001\002\000\024\003\034\004\004" +
    "\013\uff68\051\015\052\026\066\036\072\024\111\022\115" +
    "\027\001\002\000\004\013\363\001\002\000\004\115\364" +
    "\001\002\000\004\026\365\001\002\000\006\002\ufff9\013" +
    "\ufff9\001\002\000\004\115\367\001\002\000\004\026\370" +
    "\001\002\000\006\002\001\013\001\001\002\000\020\003" +
    "\034\051\015\052\026\066\036\072\024\111\022\115\027" +
    "\001\002\000\024\003\034\004\004\013\uff68\051\015\052" +
    "\026\066\036\072\024\111\022\115\027\001\002\000\004" +
    "\013\374\001\002\000\004\115\375\001\002\000\004\026" +
    "\376\001\002\000\006\002\ufffa\013\ufffa\001\002\000\004" +
    "\011\u0100\001\002\000\020\003\034\051\015\052\026\066" +
    "\036\072\024\111\022\115\027\001\002\000\024\003\034" +
    "\004\004\013\uff68\051\015\052\026\066\036\072\024\111" +
    "\022\115\027\001\002\000\004\013\u0103\001\002\000\004" +
    "\115\u0104\001\002\000\004\026\u0105\001\002\000\006\002" +
    "\ufffe\013\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0103\000\006\002\004\004\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\003\031\010\015\014\016" +
    "\015\022\016\020\017\030\023\027\024\024\027\034\030" +
    "\036\031\017\035\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\005\054\006\045\007\051\011\044\013\152" +
    "\020\327\001\001\000\002\001\001\000\014\005\054\006" +
    "\045\007\051\011\044\013\321\001\001\000\002\001\001" +
    "\000\020\005\054\006\045\007\051\011\044\013\152\020" +
    "\267\026\271\001\001\000\004\032\236\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\002\230\004\005\010" +
    "\101\014\016\015\022\016\020\017\030\023\027\024\024" +
    "\027\034\030\036\031\017\035\032\001\001\000\002\001" +
    "\001\000\006\063\150\074\147\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\005\054\006\045\007\051\011\044\013\115\001\001" +
    "\000\004\104\042\001\001\000\014\005\054\006\045\007" +
    "\051\011\044\013\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\005\054\006\045\007" +
    "\051\011\044\013\107\001\001\000\004\012\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\075\066\001\001\000\002\001\001\000\010\005\064" +
    "\006\045\007\051\001\001\000\006\006\060\007\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\070\001\001\000\002" +
    "\001\001\000\012\005\054\006\045\007\051\011\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\005\054\006\045\007\051\011\105\001\001\000" +
    "\014\005\054\006\045\007\051\011\044\013\076\001\001" +
    "\000\004\012\074\001\001\000\032\003\100\010\015\014" +
    "\016\015\022\016\020\017\030\023\027\024\024\027\034" +
    "\030\036\031\017\035\032\001\001\000\030\010\101\014" +
    "\016\015\022\016\020\017\030\023\027\024\024\027\034" +
    "\030\036\031\017\035\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\074\001\001\000" +
    "\006\075\066\076\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\074\001\001\000\006\075\066\105\117\001\001\000\002" +
    "\001\001\000\014\005\054\006\045\007\051\011\044\013" +
    "\121\001\001\000\004\012\074\001\001\000\032\003\123" +
    "\010\015\014\016\015\022\016\020\017\030\023\027\024" +
    "\024\027\034\030\036\031\017\035\032\001\001\000\030" +
    "\010\101\014\016\015\022\016\020\017\030\023\027\024" +
    "\024\027\034\030\036\031\017\035\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\106" +
    "\221\001\001\000\014\005\054\006\045\007\051\011\044" +
    "\013\131\001\001\000\004\012\074\001\001\000\006\075" +
    "\066\107\133\001\001\000\002\001\001\000\032\003\135" +
    "\010\015\014\016\015\022\016\020\017\030\023\027\024" +
    "\024\027\034\030\036\031\017\035\032\001\001\000\030" +
    "\010\101\014\016\015\022\016\020\017\030\023\027\024" +
    "\024\027\034\030\036\031\017\035\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\110" +
    "\214\001\001\000\032\003\143\010\015\014\016\015\022" +
    "\016\020\017\030\023\027\024\024\027\034\030\036\031" +
    "\017\035\032\001\001\000\030\010\101\014\016\015\022" +
    "\016\020\017\030\023\027\024\024\027\034\030\036\031" +
    "\017\035\032\001\001\000\002\001\001\000\010\063\150" +
    "\074\147\111\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\005\054\006\045\007\051\011\044\013\152" +
    "\020\151\001\001\000\004\025\155\001\001\000\004\012" +
    "\074\001\001\000\032\003\176\010\015\014\016\015\022" +
    "\016\020\017\030\023\027\024\024\027\034\030\036\031" +
    "\017\035\032\001\001\000\032\003\156\010\015\014\016" +
    "\015\022\016\020\017\030\023\027\024\024\027\034\030" +
    "\036\031\017\035\032\001\001\000\002\001\001\000\030" +
    "\010\101\014\016\015\022\016\020\017\030\023\027\024" +
    "\024\027\034\030\036\031\017\035\032\001\001\000\010" +
    "\063\150\064\160\074\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\063\150\065\166\074\147\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\066\174\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\010\101\014\016" +
    "\015\022\016\020\017\030\023\027\024\024\027\034\030" +
    "\036\031\017\035\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\005\054\006\045\007" +
    "\051\011\044\013\203\001\001\000\004\012\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\112\212\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\003\215\010" +
    "\015\014\016\015\022\016\020\017\030\023\027\024\024" +
    "\027\034\030\036\031\017\035\032\001\001\000\030\010" +
    "\101\014\016\015\022\016\020\017\030\023\027\024\024" +
    "\027\034\030\036\031\017\035\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\005\054" +
    "\006\045\007\051\011\044\013\222\001\001\000\004\012" +
    "\074\001\001\000\032\003\224\010\015\014\016\015\022" +
    "\016\020\017\030\023\027\024\024\027\034\030\036\031" +
    "\017\035\032\001\001\000\030\010\101\014\016\015\022" +
    "\016\020\017\030\023\027\024\024\027\034\030\036\031" +
    "\017\035\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\073\264\001\001\000\002\001\001\000\020\005\054\006" +
    "\045\007\051\011\044\013\250\033\247\034\252\001\001" +
    "\000\014\005\054\006\045\007\051\011\044\013\241\001" +
    "\001\000\004\012\074\001\001\000\006\072\243\075\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\005" +
    "\054\006\045\007\051\011\044\013\254\001\001\000\004" +
    "\012\074\001\001\000\016\005\054\006\045\007\051\011" +
    "\044\013\250\034\262\001\001\000\004\103\260\001\001" +
    "\000\002\001\001\000\016\005\054\006\045\007\051\011" +
    "\044\013\250\034\261\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\005\054\006\045\007" +
    "\051\011\044\013\265\001\001\000\004\012\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\070\310\075" +
    "\066\001\001\000\006\004\273\021\272\001\001\000\006" +
    "\004\276\022\277\001\001\000\002\001\001\000\032\003" +
    "\313\010\015\014\016\015\022\016\020\017\030\023\027" +
    "\024\024\027\034\030\036\031\017\035\032\001\001\000" +
    "\020\005\054\006\045\007\051\011\044\013\152\020\267" +
    "\026\307\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\067\304\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\070\310\075\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\003\312\010\015\014\016\015\022\016" +
    "\020\017\030\023\027\024\024\027\034\030\036\031\017" +
    "\035\032\001\001\000\030\010\101\014\016\015\022\016" +
    "\020\017\030\023\027\024\024\027\034\030\036\031\017" +
    "\035\032\001\001\000\030\010\101\014\016\015\022\016" +
    "\020\017\030\023\027\024\024\027\034\030\036\031\017" +
    "\035\032\001\001\000\032\003\320\010\015\014\016\015" +
    "\022\016\020\017\030\023\027\024\024\027\034\030\036" +
    "\031\017\035\032\001\001\000\004\071\316\001\001\000" +
    "\032\003\317\010\015\014\016\015\022\016\020\017\030" +
    "\023\027\024\024\027\034\030\036\031\017\035\032\001" +
    "\001\000\030\010\101\014\016\015\022\016\020\017\030" +
    "\023\027\024\024\027\034\030\036\031\017\035\032\001" +
    "\001\000\030\010\101\014\016\015\022\016\020\017\030" +
    "\023\027\024\024\027\034\030\036\031\017\035\032\001" +
    "\001\000\004\012\074\001\001\000\006\075\066\077\324" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\330\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\100" +
    "\334\001\001\000\002\001\001\000\016\005\054\006\045" +
    "\007\051\011\044\013\152\020\336\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\101\350" +
    "\001\001\000\016\005\054\006\045\007\051\011\044\013" +
    "\152\020\343\001\001\000\002\001\001\000\006\075\066" +
    "\102\345\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\005\054\006\045\007\051\011\044" +
    "\013\152\020\351\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\376\001\001\000\002\001\001\000\004" +
    "\056\370\001\001\000\036\002\357\003\360\004\005\010" +
    "\015\014\016\015\022\016\020\017\030\023\027\024\024" +
    "\027\034\030\036\031\017\035\032\001\001\000\002\001" +
    "\001\000\034\002\361\004\005\010\101\014\016\015\022" +
    "\016\020\017\030\023\027\024\024\027\034\030\036\031" +
    "\017\035\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\003\371\010\015" +
    "\014\016\015\022\016\020\017\030\023\027\024\024\027" +
    "\034\030\036\031\017\035\032\001\001\000\034\002\372" +
    "\004\005\010\101\014\016\015\022\016\020\017\030\023" +
    "\027\024\024\027\034\030\036\031\017\035\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\003\u0100\010\015" +
    "\014\016\015\022\016\020\017\030\023\027\024\024\027" +
    "\034\030\036\031\017\035\032\001\001\000\034\002\u0101" +
    "\004\005\010\101\014\016\015\022\016\020\017\030\023" +
    "\027\024\024\027\034\030\036\031\017\035\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
        int err = 0;
	public void syntax_error (Symbol s)
	{
            err++;
            int line = s.right;
            int column = s.left;
            System.out.println("Syntax error near line " + line + ", column " + column + "; found: " + s.value + ".");
	}

	public void unrecovered_syntax_error (Symbol s) throws java.lang.Exception
	{
            err++;
            System.out.println("Could not recover from error.");
	}
        
    public void PrintErrores()
    {
        System.out.println( err +" errors were found.");
    }

    public void report_error(String message, Object info) {
    if (info instanceof String){
	err++; 
      System.err.println("  "+ "==> " + info + " "+ message+".");
    }
    else {
    	StringBuffer m = new StringBuffer("Error ");
    	if (info instanceof java_cup.runtime.Symbol) 
     	   m.append( "("+info.toString()+")" );     
    	m.append(" : "+message);   
    	System.err.println(m);
     }
   }

	public Parser(Lexer lex, ComplexSymbolFactory sf){
		super(lex,sf);
	}

	public static void main(String[] args) throws Exception{

		ComplexSymbolFactory csf = new ComplexSymbolFactory();
		Reader rscanner;
		rscanner = new BufferedReader(new FileReader("source.txt"));
		ScannerBuffer lexer = new ScannerBuffer(new Lexer(rscanner,csf));

		Parser p = new Parser(lexer,csf);
		XMLElement e = (XMLElement)p.parse().value;

		XMLOutputFactory outFactory = XMLOutputFactory.newInstance();
		XMLStreamWriter sw = outFactory.createXMLStreamWriter(new FileOutputStream("outStream.xml"),"UTF-8");
		XMLElement.dump(lexer,sw,e,"expr","stmt");

		Transformer transformer = TransformerFactory.newInstance().newTransformer(new StreamSource(new File("tree.xsl")));
      	Source text = new StreamSource(new File("outStream.xml"));
      	transformer.transform(text, new StreamResult(new File("output.xml")));
      	transformer = TransformerFactory.newInstance().newTransformer(new StreamSource(new File("tree-view.xsl")));
      	text = new StreamSource(new File("output.xml"));
      	transformer.transform(text, new StreamResult(new File("ast.html")));

	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // procedure ::= PROCEDURE ID IS BEGIN procedure END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= procedure EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Unexpected symbol", "Wrong procedure,");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // procedure ::= PROCEDURE ID error NT$0 BEGIN statementsSeguidos procedure END ID SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Expected identifier", "Wrong procedure");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // procedure ::= PROCEDURE error NT$1 IS BEGIN statementsSeguidos procedure END ID SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$2 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Expected begin", "Wrong procedure");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // procedure ::= PROCEDURE ID IS error NT$2 statementsSeguidos procedure END ID SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // procedure ::= PROCEDURE ID IS BEGIN statementsSeguidos procedure END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // procedure ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // subprogramDeclaration ::= subprogramSpecification IS declBody BEGIN statementsSeguidos END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subprogramDeclaration",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$3 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Error in subprogram declaration", "Wrong declaration");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // subprogramDeclaration ::= error NT$3 IS declBody BEGIN statementsSeguidos END ID SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subprogramDeclaration",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$4 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("IS expected", "Wrong declaration");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // subprogramDeclaration ::= subprogramSpecification error NT$4 declBody BEGIN statementsSeguidos END ID SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subprogramDeclaration",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // subprogramSpecification ::= PROCEDURE ID parameterInParenthesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subprogramSpecification",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$5 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Error in subprogram specification", "Wrong declaration");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // subprogramSpecification ::= error NT$5 ID parameterInParenthesis 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subprogramSpecification",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$6 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Missing return", "Wrong declaration");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // subprogramSpecification ::= FUNCTION ID parameterInParenthesis error NT$6 typeParam 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subprogramSpecification",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // subprogramSpecification ::= FUNCTION ID parameterInParenthesis RETURN typeParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subprogramSpecification",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parameterInParenthesis ::= LPAR parameterSpecification RPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameterInParenthesis",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // parameterInParenthesis ::= LPAR parameterSpecification error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.report_error("Missing right parenthesis", "Wrong");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameterInParenthesis",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parameterInParenthesis ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameterInParenthesis",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parameterSpecification ::= parameterSpecification SEMICOLON parameterSpecificationP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameterSpecification",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parameterSpecification ::= parameterSpecificationP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameterSpecification",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parameterSpecificationP ::= idSequence COLON mode typeParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameterSpecificationP",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // idSequence ::= idSequence COMMA ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idSequence",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // idSequence ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idSequence",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // mode ::= IN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mode",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // mode ::= OUT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mode",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // mode ::= IN OUT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mode",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // mode ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mode",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // typeParam ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeParam",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // typeParam ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeParam",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // typeParam ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeParam",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declBody ::= basicDeclItem 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declBody",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declBody ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declBody",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // basicDeclItem ::= basicDeclItem basicDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("basicDeclItem",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // basicDeclItem ::= basicDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("basicDeclItem",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // basicDecl ::= subprogramDeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("basicDecl",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // basicDecl ::= numDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("basicDecl",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // numDecl ::= idSequence COLON typeParam declareAndAssign SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numDecl",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declareAndAssign ::= ASSIGN expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declareAndAssign",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declareAndAssign ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declareAndAssign",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statementsSeguidos ::= statementsSeguidos statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementsSeguidos",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statementsSeguidos ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementsSeguidos",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= simpleStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= statementCompuesto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // simpleStatement ::= assignmentStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleStatement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // simpleStatement ::= return_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleStatement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // simpleStatement ::= exit_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleStatement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // simpleStatement ::= callProcedure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleStatement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statementCompuesto ::= ifStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementCompuesto",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // statementCompuesto ::= loopStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementCompuesto",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // loopStatement ::= forOrWhile 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loopStatement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // loopStatement ::= forStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loopStatement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // forOrWhile ::= WHILE condition loopBody 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forOrWhile",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$7 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Missing While", "Wrong while");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // forOrWhile ::= error NT$7 condition loopBody 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forOrWhile",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // loopBody ::= LOOP statementsSeguidos END LOOP SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loopBody",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$8 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.report_error("Loop error", "Wrong loop");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // loopBody ::= LOOP error NT$8 END LOOP SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loopBody",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$9 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.report_error("Missing end", "Wrong loop");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // loopBody ::= LOOP statementsSeguidos error NT$9 LOOP SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loopBody",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$10 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.report_error("Missing loop", "Wrong loop");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // loopBody ::= LOOP statementsSeguidos END error NT$10 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loopBody",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // loopBody ::= error statementsSeguidos END LOOP SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loopBody",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ifStatement ::= IF conditionPart elsif else END IF SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStatement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$11 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.report_error("Missing if", "Wrong if statement");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ifStatement ::= IF conditionPart elsif else END error NT$11 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStatement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // elsif ::= elsif ELSIF conditionPart 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsif",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // elsif ::= elsif ELSIF error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.report_error("Error in condition", "Wrong elseif");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsif",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // elsif ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsif",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // conditionPart ::= condition THEN statementsSeguidos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionPart",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$12 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.report_error("Error in condition", "Wrong condition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // conditionPart ::= error NT$12 THEN statementsSeguidos 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionPart",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$13 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.report_error("Missing then", "Wrong condition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$13",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // conditionPart ::= condition error NT$13 statementsSeguidos 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionPart",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // else ::= ELSE statementsSeguidos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // else ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // condition ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // assignmentStatement ::= ID ASSIGN expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentStatement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$14 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Assignment error", "Wrong assignment");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$14",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // assignmentStatement ::= ID ASSIGN error NT$14 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentStatement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$15 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Assignment error", "Wrong assignment");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$15",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // assignmentStatement ::= ID error NT$15 expression SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentStatement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$16 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Missing identifier", "Wrong assignment");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$16",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // assignmentStatement ::= error NT$16 ASSIGN expression SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentStatement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // assignmentStatement ::= ID ASSIGN expression error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.report_error("Missing semicolon", "Wrong assignment");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentStatement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expression ::= expression boolOp relation 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$17 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Error in expression", "Wrong"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$17",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expression ::= error NT$17 boolOp relation 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expression ::= expression boolOp error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.report_error("Error in bool operation", "Wrong"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expression ::= relation 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // boolOp ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolOp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // boolOp ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolOp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // boolOp ::= XOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolOp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // relation ::= arithmeticExpression OPREL arithmeticExpression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relation",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // relation ::= arithmeticExpression OPREL error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.report_error("Error in the arithmetic expression", "Wrong relation"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relation",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // relation ::= arithmeticExpression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relation",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // arithmeticExpression ::= arithmeticExpression SUMSUBS term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmeticExpression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // arithmeticExpression ::= arithmeticExpression SUMSUBS error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.report_error("Error in arithmetic expresion", "Wrong expression"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmeticExpression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // arithmeticExpression ::= term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmeticExpression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // term ::= term MULDIV factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // term ::= term MULDIV error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.report_error("Expected a factor after mult or div", "Wrong term/factor"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // term ::= factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // factor ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // factor ::= NUM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // factor ::= REAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // factor ::= LPAR expression RPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$18 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.report_error("Error in the expression", "Wrong factor");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$18",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // factor ::= LPAR error NT$18 RPAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // factor ::= LPAR expression error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.report_error("Parenthesis not closed", "Wrong factor in parenthesis");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // return_statement ::= RETURN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_statement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // return_statement ::= RETURN expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_statement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$19 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Missing return statement", "Wrong return");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$19",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // return_statement ::= RETURN error NT$19 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_statement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // exit_statement ::= EXIT SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exit_statement",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // exit_statement ::= EXIT ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exit_statement",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // exit_statement ::= EXIT ID WHEN condition SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exit_statement",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$20 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Missing identifier", "Wrong exit statement");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$20",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // exit_statement ::= EXIT error NT$20 WHEN condition SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exit_statement",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // NT$21 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Missing when", "Wrong exit statement");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$21",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // exit_statement ::= EXIT ID error NT$21 condition SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exit_statement",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$22 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Error in when condition", "Wrong exit statement");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$22",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // exit_statement ::= EXIT ID WHEN error NT$22 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exit_statement",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // callProcedure ::= ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("callProcedure",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // callProcedure ::= ID parameterCall SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("callProcedure",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // parameterCall ::= LPAR parameterList RPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameterCall",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // parameterCall ::= LPAR parameterList error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.report_error("Missing right parenthesis", "Wrong parameter");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameterCall",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // parameterList ::= parameterList COMMA parameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameterList",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NT$23 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Missing comma", "Wrong parameter");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$23",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // parameterList ::= parameterList error NT$23 parameter 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameterList",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // parameterList ::= parameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameterList",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // parameter ::= ID PARAMASSIGN expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // parameter ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // callFunction ::= ID parameterCall 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("callFunction",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // forStatement ::= FOR ID IN expression DOTDOT expression LOOP statementsSeguidos END LOOP SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forStatement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // NT$24 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Expected In", "Wrong for statement");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$24",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // forStatement ::= FOR ID error NT$24 expression DOTDOT expression LOOP statementsSeguidos END LOOP SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forStatement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // NT$25 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Error in expression", "Wrong for statement");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$25",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // forStatement ::= FOR ID IN error NT$25 DOTDOT expression LOOP statementsSeguidos END LOOP SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forStatement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // NT$26 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Missing ellipsis", "Wrong for statement");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$26",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // forStatement ::= FOR ID IN expression error NT$26 expression LOOP statementsSeguidos END LOOP SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forStatement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // NT$27 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Error in expression", "Wrong for statement");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$27",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // forStatement ::= FOR ID IN expression DOTDOT error NT$27 LOOP statementsSeguidos END LOOP SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forStatement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // NT$28 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Missing loop statement", "Wrong for statement");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$28",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // forStatement ::= FOR ID IN expression DOTDOT expression error NT$28 statementsSeguidos END LOOP SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forStatement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // NT$29 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Missing end", "Wrong for statement");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$29",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // forStatement ::= FOR ID IN expression DOTDOT expression LOOP statementsSeguidos error NT$29 LOOP SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forStatement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // NT$30 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Missing loop", "Wrong for statement");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$30",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // forStatement ::= FOR ID IN expression DOTDOT expression LOOP statementsSeguidos END error NT$30 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forStatement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // empty ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("empty",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
