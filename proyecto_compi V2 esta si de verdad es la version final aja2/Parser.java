
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

import java.io.*;
import java_cup.runtime.*;
import java.util.*;
import java.lang.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\002\012\000\002\002\004\000\002\002" +
    "\013\000\002\002\003\000\002\003\004\000\002\003\003" +
    "\000\002\010\003\000\002\010\003\000\002\015\003\000" +
    "\002\016\003\000\002\016\003\000\002\017\011\000\002" +
    "\017\003\000\002\021\005\000\002\021\003\000\002\026" +
    "\005\000\002\022\004\000\002\022\003\000\002\023\003" +
    "\000\002\024\005\000\002\025\007\000\002\020\003\000" +
    "\002\014\006\000\002\013\005\000\002\013\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\011" +
    "\005\000\002\011\003\000\002\005\005\000\002\005\003" +
    "\000\002\006\005\000\002\006\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\005\000\002" +
    "\004\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\114\000\006\002\uffdb\054\004\001\002\000\004\114" +
    "\010\001\002\000\004\002\007\001\002\000\006\002\ufffe" +
    "\063\ufffe\001\002\000\004\002\000\001\002\000\004\065" +
    "\011\001\002\000\004\061\012\001\002\000\016\003\022" +
    "\034\021\054\004\063\uffdb\110\014\114\024\001\002\000" +
    "\004\063\114\001\002\000\012\006\041\114\046\121\036" +
    "\122\044\001\002\000\022\003\ufffb\034\ufffb\047\ufffb\054" +
    "\ufffb\063\ufffb\103\ufffb\110\ufffb\114\ufffb\001\002\000\022" +
    "\003\uffef\034\uffef\047\uffef\054\uffef\063\uffef\103\uffef\110" +
    "\uffef\114\uffef\001\002\000\022\003\ufffa\034\ufffa\047\ufffa" +
    "\054\ufffa\063\ufffa\103\ufffa\110\ufffa\114\ufffa\001\002\000" +
    "\022\003\ufff7\034\ufff7\047\ufff7\054\ufff7\063\ufff7\103\ufff7" +
    "\110\ufff7\114\ufff7\001\002\000\012\006\041\114\046\121" +
    "\036\122\044\001\002\000\022\003\ufff5\034\ufff5\047\ufff5" +
    "\054\ufff5\063\ufff5\103\ufff5\110\ufff5\114\ufff5\001\002\000" +
    "\022\003\ufffc\034\ufffc\047\ufffc\054\ufffc\063\ufffc\103\ufffc" +
    "\110\ufffc\114\ufffc\001\002\000\004\116\035\001\002\000" +
    "\022\003\ufff8\034\ufff8\047\ufff8\054\ufff8\063\ufff8\103\ufff8" +
    "\110\ufff8\114\ufff8\001\002\000\016\003\022\034\021\054" +
    "\004\063\uffdb\110\014\114\024\001\002\000\022\003\ufff9" +
    "\034\ufff9\047\ufff9\054\ufff9\063\ufff9\103\ufff9\110\ufff9\114" +
    "\ufff9\001\002\000\004\063\032\001\002\000\022\003\ufffd" +
    "\034\ufffd\047\ufffd\054\ufffd\063\ufffd\103\ufffd\110\ufffd\114" +
    "\ufffd\001\002\000\004\114\033\001\002\000\004\010\034" +
    "\001\002\000\006\002\uffff\063\uffff\001\002\000\012\006" +
    "\041\114\046\121\036\122\044\001\002\000\026\004\uffde" +
    "\005\uffde\007\uffde\010\uffde\014\uffde\021\uffde\025\uffde\036" +
    "\uffde\043\uffde\115\uffde\001\002\000\016\010\uffe9\014\uffe9" +
    "\021\uffe9\025\uffe9\036\uffe9\043\uffe9\001\002\000\026\004" +
    "\uffe2\005\060\007\uffe2\010\uffe2\014\uffe2\021\uffe2\025\uffe2" +
    "\036\uffe2\043\uffe2\115\uffe2\001\002\000\012\006\041\114" +
    "\046\121\036\122\044\001\002\000\022\004\056\010\uffe4" +
    "\014\uffe4\021\uffe4\025\uffe4\036\uffe4\043\uffe4\115\055\001" +
    "\002\000\012\010\047\014\050\036\052\043\053\001\002" +
    "\000\026\004\uffdd\005\uffdd\007\uffdd\010\uffdd\014\uffdd\021" +
    "\uffdd\025\uffdd\036\uffdd\043\uffdd\115\uffdd\001\002\000\026" +
    "\004\uffe0\005\uffe0\007\uffe0\010\uffe0\014\uffe0\021\uffe0\025" +
    "\uffe0\036\uffe0\043\uffe0\115\uffe0\001\002\000\026\004\uffdf" +
    "\005\uffdf\007\uffdf\010\uffdf\014\uffdf\021\uffdf\025\uffdf\036" +
    "\uffdf\043\uffdf\115\uffdf\001\002\000\022\003\uffeb\034\uffeb" +
    "\047\uffeb\054\uffeb\063\uffeb\103\uffeb\110\uffeb\114\uffeb\001" +
    "\002\000\012\006\uffe8\114\uffe8\121\uffe8\122\uffe8\001\002" +
    "\000\012\006\041\114\046\121\036\122\044\001\002\000" +
    "\012\006\uffe7\114\uffe7\121\uffe7\122\uffe7\001\002\000\012" +
    "\006\uffe6\114\uffe6\121\uffe6\122\uffe6\001\002\000\016\010" +
    "\uffea\014\uffea\021\uffea\025\uffea\036\uffea\043\uffea\001\002" +
    "\000\012\006\041\114\046\121\036\122\044\001\002\000" +
    "\012\006\041\114\046\121\036\122\044\001\002\000\026" +
    "\004\uffe3\005\060\007\uffe3\010\uffe3\014\uffe3\021\uffe3\025" +
    "\uffe3\036\uffe3\043\uffe3\115\uffe3\001\002\000\012\006\041" +
    "\114\046\121\036\122\044\001\002\000\026\004\uffe1\005" +
    "\uffe1\007\uffe1\010\uffe1\014\uffe1\021\uffe1\025\uffe1\036\uffe1" +
    "\043\uffe1\115\uffe1\001\002\000\020\004\056\010\uffe5\014" +
    "\uffe5\021\uffe5\025\uffe5\036\uffe5\043\uffe5\001\002\000\006" +
    "\004\056\007\064\001\002\000\026\004\uffdc\005\uffdc\007" +
    "\uffdc\010\uffdc\014\uffdc\021\uffdc\025\uffdc\036\uffdc\043\uffdc" +
    "\115\uffdc\001\002\000\004\025\103\001\002\000\014\014" +
    "\050\021\uffec\025\uffec\036\052\043\053\001\002\000\010" +
    "\047\uffdb\063\uffdb\103\uffdb\001\002\000\010\047\072\063" +
    "\uffdb\103\073\001\002\000\010\047\ufff3\063\ufff3\103\ufff3" +
    "\001\002\000\012\003\022\034\021\110\014\114\024\001" +
    "\002\000\012\006\041\114\046\121\036\122\044\001\002" +
    "\000\004\063\ufff0\001\002\000\004\063\076\001\002\000" +
    "\004\034\077\001\002\000\004\010\100\001\002\000\022" +
    "\003\ufff6\034\ufff6\047\ufff6\054\ufff6\063\ufff6\103\ufff6\110" +
    "\ufff6\114\ufff6\001\002\000\010\047\ufff4\063\ufff4\103\ufff4" +
    "\001\002\000\014\003\022\034\021\063\ufff1\110\014\114" +
    "\024\001\002\000\012\003\022\034\021\110\014\114\024" +
    "\001\002\000\020\003\022\034\021\047\ufff2\063\ufff2\103" +
    "\ufff2\110\014\114\024\001\002\000\004\021\106\001\002" +
    "\000\012\003\022\034\021\110\014\114\024\001\002\000" +
    "\022\003\uffee\034\uffee\047\uffee\054\uffee\063\uffee\103\uffee" +
    "\110\uffee\114\uffee\001\002\000\014\003\022\034\021\063" +
    "\111\110\014\114\024\001\002\000\004\021\112\001\002" +
    "\000\004\010\113\001\002\000\022\003\uffed\034\uffed\047" +
    "\uffed\054\uffed\063\uffed\103\uffed\110\uffed\114\uffed\001\002" +
    "\000\004\114\115\001\002\000\004\010\116\001\002\000" +
    "\006\002\001\063\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\114\000\006\002\004\004\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\002\012\003" +
    "\025\004\005\010\022\014\026\015\014\016\016\017\024" +
    "\023\017\024\015\001\001\000\002\001\001\000\016\005" +
    "\041\006\037\007\044\011\036\013\065\020\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\005\041\006\037\007\044\011\036" +
    "\013\065\020\064\026\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\002\027\004\005\010\030\014\026\015\014\016\016\017" +
    "\024\023\017\024\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\041\006\037\007\044" +
    "\011\036\013\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\062\006\037\007\044" +
    "\001\001\000\002\001\001\000\004\012\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\041\006\037\007" +
    "\044\011\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\061\006\037\007\044\001" +
    "\001\000\006\006\056\007\044\001\001\000\002\001\001" +
    "\000\004\007\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\050\001\001\000\006\004\070\021\067\001" +
    "\001\000\006\004\073\022\074\001\001\000\002\001\001" +
    "\000\022\003\101\010\022\014\026\015\014\016\016\017" +
    "\024\023\017\024\015\001\001\000\020\005\041\006\037" +
    "\007\044\011\036\013\065\020\064\026\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\010" +
    "\030\014\026\015\014\016\016\017\024\023\017\024\015" +
    "\001\001\000\022\003\103\010\022\014\026\015\014\016" +
    "\016\017\024\023\017\024\015\001\001\000\020\010\030" +
    "\014\026\015\014\016\016\017\024\023\017\024\015\001" +
    "\001\000\004\025\106\001\001\000\022\003\107\010\022" +
    "\014\026\015\014\016\016\017\024\023\017\024\015\001" +
    "\001\000\002\001\001\000\020\010\030\014\026\015\014" +
    "\016\016\017\024\023\017\024\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
        int err = 0;
	public void syntax_error (Symbol s)
	{
            err++;
            int line = s.right;
            int column = s.left;
            System.out.println("Error sintactico encontrado en linea: " + line + " Columna: " + column + " simbolo conflictivo: " + s.value);
	}

	public void unrecovered_syntax_error (Symbol s) throws java.lang.Exception
	{
            err++;
            System.out.println("ERROR FATAL, COMPILACION NO PUDO SER TERMINADA");
	}
        
    public void PrintErrores()
    {
        System.out.println( err +" ERRORES FUERON ENCONTRADOS!!");
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // procedure ::= PROCEDURE IDENTIFIER IS BEGIN procedure END IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= procedure EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // procedure ::= PROCEDURE IDENTIFIER IS BEGIN sequence_of_statements procedure END IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // procedure ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sequence_of_statements ::= sequence_of_statements statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_of_statements",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sequence_of_statements ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_of_statements",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= simple_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= compound_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // simple_statement ::= assignment_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // compound_statement ::= if_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // compound_statement ::= loop_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // if_statement ::= IF condition_part elsif else END IF SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // if_statement ::= error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // elsif ::= elsif ELSIF condition_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsif",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // elsif ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsif",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // condition_part ::= condition THEN sequence_of_statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition_part",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // else ::= ELSE sequence_of_statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // else ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // loop_statement ::= while_or_for 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_statement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // while_or_for ::= WHILE condition rest_of_loop 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_or_for",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // rest_of_loop ::= LOOP sequence_of_statements END LOOP SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rest_of_loop",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // condition ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // assignment_statement ::= IDENTIFIER ASSIGN expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression ::= expression boolean_operation relation 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= relation 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // boolean_operation ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operation",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // boolean_operation ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operation",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // boolean_operation ::= XOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operation",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // relation ::= arithmetic_expression OPREL arithmetic_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relation",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // relation ::= arithmetic_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relation",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // arithmetic_expression ::= arithmetic_expression SUMSUBS term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // arithmetic_expression ::= term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // term ::= term MULDIV factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // term ::= factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // factor ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // factor ::= NUM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // factor ::= REAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // factor ::= LPAR arithmetic_expression RPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // empty ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("empty",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
