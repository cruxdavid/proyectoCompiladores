/* The following code was generated by JFlex 1.6.1 */

import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/cruxd/Documents/Clases/Compiladores 1/proyectoCompiladores/proyecto_compi V2 esta si de verdad es la version final aja2/lexer.flex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner, sym {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int COMMENTS = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\4\1\61\1\62\1\3\22\0\1\2\1\0\1\60"+
    "\5\0\1\51\1\52\1\47\1\45\1\56\1\46\1\50\1\44\1\57"+
    "\11\1\1\41\1\55\1\43\1\42\1\43\2\0\1\5\1\40\3\5"+
    "\1\37\1\53\1\5\1\36\6\5\1\54\12\5\1\0\1\63\2\0"+
    "\1\6\1\0\1\7\1\10\1\16\1\15\1\20\1\26\1\22\1\27"+
    "\1\21\1\5\1\35\1\25\1\32\1\14\1\11\1\24\1\5\1\12"+
    "\1\17\1\13\1\34\1\33\1\30\1\23\1\31\1\5\12\0\1\61"+
    "\u1fa2\0\1\61\1\61\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\2\4\27\5\1\1\2\6"+
    "\1\7\2\10\1\7\1\1\1\11\1\12\2\5\1\13"+
    "\1\14\1\2\1\15\1\16\1\17\1\20\1\21\1\17"+
    "\1\0\2\5\1\22\5\5\1\23\1\5\1\24\12\5"+
    "\1\25\11\5\1\26\1\27\1\30\20\5\1\31\1\32"+
    "\1\33\2\5\1\0\1\34\1\35\1\36\1\37\1\40"+
    "\1\5\1\41\1\5\1\42\1\5\1\43\3\5\1\44"+
    "\5\5\1\45\5\5\1\46\1\47\12\5\1\50\5\5"+
    "\1\51\5\5\1\52\4\5\1\53\1\54\3\5\1\55"+
    "\1\56\3\5\1\57\10\5\1\60\1\5\1\61\1\62"+
    "\1\63\4\5\1\64\6\5\1\65\1\66\1\5\1\67"+
    "\4\5\1\70\2\5\1\71\1\72\4\5\1\73\1\74"+
    "\2\5\1\75\1\5\1\76\1\77\6\5\1\100\1\101"+
    "\5\5\1\102\1\5\1\103\6\5\1\104\1\5\1\105"+
    "\1\5\1\106\1\107\1\110\1\111\1\5\1\112\3\5"+
    "\1\113\2\5\1\114\12\5\1\115\1\116\1\5\1\117"+
    "\2\5\1\120\1\5\1\121\1\122\1\5\1\123\1\124"+
    "\1\5\1\125\1\126\1\5\1\127\1\130\2\5\1\131"+
    "\1\132\1\133\1\134";

  private static int [] zzUnpackAction() {
    int [] result = new int[298];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\234\0\u0104\0\234"+
    "\0\u0138\0\u016c\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4"+
    "\0\u02d8\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444"+
    "\0\u0478\0\u04ac\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0\0\u05e4"+
    "\0\234\0\u0618\0\u0618\0\234\0\u064c\0\234\0\u0680\0\234"+
    "\0\234\0\u06b4\0\u06e8\0\234\0\234\0\u071c\0\234\0\u0750"+
    "\0\234\0\u0784\0\234\0\u07b8\0\u07ec\0\u0820\0\u0854\0\u0138"+
    "\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u0138\0\u098c\0\u0138"+
    "\0\u09c0\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c"+
    "\0\u0b60\0\u0b94\0\u0138\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u0c98"+
    "\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\u0138\0\u0138\0\u0138\0\u0d9c"+
    "\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c"+
    "\0\u0f70\0\u0fa4\0\u0fd8\0\u100c\0\u1040\0\u1074\0\u10a8\0\234"+
    "\0\234\0\234\0\u10dc\0\u1110\0\u071c\0\234\0\234\0\234"+
    "\0\234\0\u07ec\0\u1144\0\u0138\0\u1178\0\u0138\0\u11ac\0\u0138"+
    "\0\u11e0\0\u1214\0\u1248\0\u0138\0\u127c\0\u12b0\0\u12e4\0\u1318"+
    "\0\u134c\0\u0138\0\u1380\0\u13b4\0\u13e8\0\u141c\0\u1450\0\u0138"+
    "\0\u0138\0\u1484\0\u14b8\0\u14ec\0\u1520\0\u1554\0\u1588\0\u15bc"+
    "\0\u15f0\0\u1624\0\u1658\0\u0138\0\u168c\0\u16c0\0\u16f4\0\u1728"+
    "\0\u175c\0\u0138\0\u1790\0\u17c4\0\u17f8\0\u182c\0\u1860\0\u0138"+
    "\0\u1894\0\u18c8\0\u18fc\0\u1930\0\u0138\0\u0138\0\u1964\0\u1998"+
    "\0\u19cc\0\u0138\0\u0138\0\u1a00\0\u1a34\0\u1a68\0\u0138\0\u1a9c"+
    "\0\u1ad0\0\u1b04\0\u1b38\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08\0\u0138"+
    "\0\u1c3c\0\u0138\0\u0138\0\u0138\0\u1c70\0\u1ca4\0\u1cd8\0\u1d0c"+
    "\0\u0138\0\u1d40\0\u1d74\0\u1da8\0\u1ddc\0\u1e10\0\u1e44\0\u0138"+
    "\0\u0138\0\u1e78\0\u0138\0\u1eac\0\u1ee0\0\u1f14\0\u1f48\0\u0138"+
    "\0\u1f7c\0\u1fb0\0\u0138\0\u0138\0\u1fe4\0\u2018\0\u204c\0\u2080"+
    "\0\u0138\0\u0138\0\u20b4\0\u20e8\0\u0138\0\u211c\0\u0138\0\u0138"+
    "\0\u2150\0\u2184\0\u21b8\0\u21ec\0\u2220\0\u2254\0\u0138\0\u0138"+
    "\0\u2288\0\u22bc\0\u22f0\0\u2324\0\u2358\0\u0138\0\u238c\0\u0138"+
    "\0\u23c0\0\u23f4\0\u2428\0\u245c\0\u2490\0\u24c4\0\u0138\0\u24f8"+
    "\0\u0138\0\u252c\0\u0138\0\u0138\0\u0138\0\u0138\0\u2560\0\u0138"+
    "\0\u2594\0\u25c8\0\u25fc\0\u0138\0\u2630\0\u2664\0\u0138\0\u2698"+
    "\0\u26cc\0\u2700\0\u2734\0\u2768\0\u279c\0\u27d0\0\u2804\0\u2838"+
    "\0\u286c\0\u0138\0\u0138\0\u28a0\0\u0138\0\u28d4\0\u2908\0\u0138"+
    "\0\u293c\0\u0138\0\u0138\0\u2970\0\u0138\0\u0138\0\u29a4\0\u0138"+
    "\0\u0138\0\u29d8\0\u0138\0\u0138\0\u2a0c\0\u2a40\0\u0138\0\u0138"+
    "\0\u0138\0\u0138";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[298];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\4\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\11"+
    "\1\32\1\11\1\33\1\11\1\34\1\11\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\0\1\6\1\4\3\60\2\0\53\60\1\61"+
    "\2\60\1\62\3\63\1\64\1\61\54\63\2\0\1\63"+
    "\65\0\1\5\46\0\1\65\6\0\1\5\10\0\1\10"+
    "\60\0\1\11\3\0\34\11\12\0\2\11\2\0\1\11"+
    "\5\0\1\11\3\0\3\11\1\66\1\11\1\67\1\70"+
    "\1\71\1\11\1\72\6\11\1\73\13\11\12\0\2\11"+
    "\2\0\1\11\5\0\1\11\3\0\4\11\1\74\6\11"+
    "\1\75\20\11\12\0\2\11\2\0\1\11\5\0\1\11"+
    "\3\0\5\11\1\76\1\77\12\11\1\100\5\11\1\101"+
    "\4\11\12\0\2\11\2\0\1\11\5\0\1\11\3\0"+
    "\2\11\1\102\10\11\1\103\20\11\12\0\2\11\2\0"+
    "\1\11\5\0\1\11\3\0\2\11\1\104\10\11\1\105"+
    "\6\11\1\106\1\11\1\107\7\11\12\0\2\11\2\0"+
    "\1\11\5\0\1\11\3\0\4\11\1\110\6\11\1\111"+
    "\13\11\1\112\4\11\12\0\2\11\2\0\1\11\5\0"+
    "\1\11\3\0\4\11\1\113\6\11\1\114\1\115\17\11"+
    "\12\0\2\11\2\0\1\11\5\0\1\11\3\0\2\11"+
    "\1\116\1\11\1\117\27\11\12\0\2\11\2\0\1\11"+
    "\5\0\1\11\3\0\13\11\1\120\13\11\1\121\4\11"+
    "\12\0\2\11\2\0\1\11\5\0\1\11\3\0\7\11"+
    "\1\122\6\11\1\123\1\11\1\124\13\11\12\0\2\11"+
    "\2\0\1\11\5\0\1\11\3\0\7\11\1\125\2\11"+
    "\1\126\6\11\1\127\12\11\12\0\2\11\2\0\1\11"+
    "\5\0\1\11\3\0\4\11\1\130\6\11\1\131\20\11"+
    "\12\0\2\11\2\0\1\11\5\0\1\11\3\0\4\11"+
    "\1\132\27\11\12\0\2\11\2\0\1\11\5\0\1\11"+
    "\3\0\2\11\1\133\2\11\1\134\26\11\12\0\2\11"+
    "\2\0\1\11\5\0\1\11\3\0\4\11\1\135\7\11"+
    "\1\136\17\11\12\0\2\11\2\0\1\11\5\0\1\11"+
    "\3\0\4\11\1\137\22\11\1\140\4\11\12\0\2\11"+
    "\2\0\1\11\5\0\1\11\3\0\14\11\1\141\5\11"+
    "\1\142\11\11\12\0\2\11\2\0\1\11\5\0\1\11"+
    "\3\0\4\11\1\143\27\11\12\0\2\11\2\0\1\11"+
    "\5\0\1\11\3\0\12\11\1\144\21\11\12\0\2\11"+
    "\2\0\1\11\5\0\1\11\3\0\7\11\1\145\24\11"+
    "\12\0\2\11\2\0\1\11\5\0\1\11\3\0\20\11"+
    "\1\146\13\11\12\0\2\11\2\0\1\11\5\0\1\11"+
    "\3\0\4\11\1\147\27\11\12\0\2\11\2\0\1\11"+
    "\46\0\1\150\63\0\1\41\67\0\1\151\65\0\1\152"+
    "\14\0\1\11\3\0\13\11\1\153\20\11\12\0\2\11"+
    "\2\0\1\11\5\0\1\11\3\0\27\11\1\154\4\11"+
    "\12\0\2\11\2\0\1\11\5\0\1\155\46\0\1\65"+
    "\6\0\1\155\4\0\3\60\2\0\53\60\1\0\2\60"+
    "\13\0\1\156\1\157\1\160\43\0\1\161\7\0\1\61"+
    "\60\0\1\162\55\0\1\162\5\0\1\11\3\0\4\11"+
    "\1\163\5\11\1\164\21\11\12\0\2\11\2\0\1\11"+
    "\5\0\1\11\3\0\5\11\1\165\26\11\12\0\2\11"+
    "\2\0\1\11\5\0\1\11\3\0\10\11\1\166\23\11"+
    "\12\0\2\11\2\0\1\11\5\0\1\11\3\0\11\11"+
    "\1\167\22\11\12\0\2\11\2\0\1\11\5\0\1\11"+
    "\3\0\20\11\1\170\13\11\12\0\2\11\2\0\1\11"+
    "\5\0\1\11\3\0\10\11\1\171\23\11\12\0\2\11"+
    "\2\0\1\11\5\0\1\11\3\0\15\11\1\172\16\11"+
    "\12\0\2\11\2\0\1\11\5\0\1\11\3\0\22\11"+
    "\1\173\11\11\12\0\2\11\2\0\1\11\5\0\1\11"+
    "\3\0\6\11\1\174\25\11\12\0\2\11\2\0\1\11"+
    "\5\0\1\11\3\0\7\11\1\175\4\11\1\176\17\11"+
    "\12\0\2\11\2\0\1\11\5\0\1\11\3\0\6\11"+
    "\1\177\1\200\1\11\1\201\13\11\1\202\1\203\5\11"+
    "\12\0\2\11\2\0\1\11\5\0\1\11\3\0\12\11"+
    "\1\204\21\11\12\0\2\11\2\0\1\11\5\0\1\11"+
    "\3\0\5\11\1\205\26\11\12\0\2\11\2\0\1\11"+
    "\5\0\1\11\3\0\13\11\1\206\20\11\12\0\2\11"+
    "\2\0\1\11\5\0\1\11\3\0\17\11\1\207\14\11"+
    "\12\0\2\11\2\0\1\11\5\0\1\11\3\0\6\11"+
    "\1\210\25\11\12\0\2\11\2\0\1\11\5\0\1\11"+
    "\3\0\23\11\1\211\10\11\12\0\2\11\2\0\1\11"+
    "\5\0\1\11\3\0\20\11\1\212\13\11\12\0\2\11"+
    "\2\0\1\11\5\0\1\11\3\0\11\11\1\213\6\11"+
    "\1\214\13\11\12\0\2\11\2\0\1\11\5\0\1\11"+
    "\3\0\15\11\1\215\16\11\12\0\2\11\2\0\1\11"+
    "\5\0\1\11\3\0\12\11\1\216\21\11\12\0\2\11"+
    "\2\0\1\11\5\0\1\11\3\0\7\11\1\217\24\11"+
    "\12\0\2\11\2\0\1\11\5\0\1\11\3\0\17\11"+
    "\1\220\1\221\13\11\12\0\2\11\2\0\1\11\5\0"+
    "\1\11\3\0\3\11\1\222\30\11\12\0\2\11\2\0"+
    "\1\11\5\0\1\11\3\0\6\11\1\223\1\11\1\224"+
    "\23\11\12\0\2\11\2\0\1\11\5\0\1\11\3\0"+
    "\11\11\1\225\2\11\1\226\17\11\12\0\2\11\2\0"+
    "\1\11\5\0\1\11\3\0\12\11\1\227\21\11\12\0"+
    "\2\11\2\0\1\11\5\0\1\11\3\0\6\11\1\230"+
    "\25\11\12\0\2\11\2\0\1\11\5\0\1\11\3\0"+
    "\7\11\1\231\24\11\12\0\2\11\2\0\1\11\5\0"+
    "\1\11\3\0\5\11\1\232\26\11\12\0\2\11\2\0"+
    "\1\11\5\0\1\11\3\0\11\11\1\233\22\11\12\0"+
    "\2\11\2\0\1\11\5\0\1\11\3\0\4\11\1\234"+
    "\7\11\1\235\17\11\12\0\2\11\2\0\1\11\5\0"+
    "\1\11\3\0\4\11\1\236\27\11\12\0\2\11\2\0"+
    "\1\11\5\0\1\11\3\0\25\11\1\237\6\11\12\0"+
    "\2\11\2\0\1\11\5\0\1\11\3\0\5\11\1\240"+
    "\26\11\12\0\2\11\2\0\1\11\5\0\1\11\3\0"+
    "\7\11\1\241\24\11\12\0\2\11\2\0\1\11\5\0"+
    "\1\11\3\0\6\11\1\242\25\11\12\0\2\11\2\0"+
    "\1\11\5\0\1\11\3\0\13\11\1\243\1\244\17\11"+
    "\12\0\2\11\2\0\1\11\5\0\1\11\3\0\10\11"+
    "\1\245\23\11\12\0\2\11\2\0\1\11\5\0\1\11"+
    "\3\0\13\11\1\246\20\11\12\0\2\11\2\0\1\11"+
    "\5\0\1\11\3\0\6\11\1\247\25\11\12\0\2\11"+
    "\2\0\1\11\5\0\1\11\3\0\4\11\1\250\27\11"+
    "\12\0\2\11\2\0\1\11\5\0\1\11\3\0\4\11"+
    "\1\251\27\11\12\0\2\11\2\0\1\11\5\0\1\11"+
    "\3\0\6\11\1\252\25\11\12\0\2\11\2\0\1\11"+
    "\5\0\1\11\3\0\6\11\1\253\25\11\12\0\2\11"+
    "\2\0\1\11\5\0\1\11\3\0\5\11\1\254\26\11"+
    "\12\0\2\11\2\0\1\11\5\0\1\11\3\0\2\11"+
    "\1\255\31\11\12\0\2\11\2\0\1\11\5\0\1\11"+
    "\3\0\13\11\1\256\20\11\12\0\2\11\2\0\1\11"+
    "\5\0\1\11\3\0\24\11\1\257\7\11\12\0\2\11"+
    "\2\0\1\11\5\0\1\11\3\0\14\11\1\260\17\11"+
    "\12\0\2\11\2\0\1\11\5\0\1\11\3\0\13\11"+
    "\1\261\20\11\12\0\2\11\2\0\1\11\5\0\1\11"+
    "\3\0\15\11\1\262\16\11\12\0\2\11\2\0\1\11"+
    "\5\0\1\11\3\0\12\11\1\263\21\11\12\0\2\11"+
    "\2\0\1\11\5\0\1\11\3\0\27\11\1\264\4\11"+
    "\12\0\2\11\2\0\1\11\5\0\1\11\3\0\2\11"+
    "\1\265\31\11\12\0\2\11\2\0\1\11\5\0\1\11"+
    "\3\0\4\11\1\266\27\11\12\0\2\11\2\0\1\11"+
    "\5\0\1\11\3\0\13\11\1\267\20\11\12\0\2\11"+
    "\2\0\1\11\5\0\1\11\3\0\30\11\1\270\3\11"+
    "\12\0\2\11\2\0\1\11\5\0\1\11\3\0\25\11"+
    "\1\271\6\11\12\0\2\11\2\0\1\11\5\0\1\11"+
    "\3\0\7\11\1\272\24\11\12\0\2\11\2\0\1\11"+
    "\5\0\1\11\3\0\13\11\1\273\20\11\12\0\2\11"+
    "\2\0\1\11\5\0\1\11\3\0\20\11\1\274\13\11"+
    "\12\0\2\11\2\0\1\11\5\0\1\11\3\0\20\11"+
    "\1\275\13\11\12\0\2\11\2\0\1\11\5\0\1\11"+
    "\3\0\2\11\1\276\3\11\1\277\25\11\12\0\2\11"+
    "\2\0\1\11\5\0\1\11\3\0\14\11\1\300\17\11"+
    "\12\0\2\11\2\0\1\11\5\0\1\11\3\0\13\11"+
    "\1\301\20\11\12\0\2\11\2\0\1\11\5\0\1\11"+
    "\3\0\12\11\1\302\21\11\12\0\2\11\2\0\1\11"+
    "\5\0\1\11\3\0\2\11\1\303\31\11\12\0\2\11"+
    "\2\0\1\11\5\0\1\11\3\0\13\11\1\304\20\11"+
    "\12\0\2\11\2\0\1\11\5\0\1\11\3\0\6\11"+
    "\1\305\25\11\12\0\2\11\2\0\1\11\5\0\1\11"+
    "\3\0\5\11\1\306\26\11\12\0\2\11\2\0\1\11"+
    "\5\0\1\11\3\0\13\11\1\307\20\11\12\0\2\11"+
    "\2\0\1\11\5\0\1\11\3\0\6\11\1\310\25\11"+
    "\12\0\2\11\2\0\1\11\5\0\1\11\3\0\13\11"+
    "\1\311\1\312\17\11\12\0\2\11\2\0\1\11\5\0"+
    "\1\11\3\0\4\11\1\313\27\11\12\0\2\11\2\0"+
    "\1\11\5\0\1\11\3\0\13\11\1\314\20\11\12\0"+
    "\2\11\2\0\1\11\5\0\1\11\3\0\30\11\1\315"+
    "\3\11\12\0\2\11\2\0\1\11\5\0\1\11\3\0"+
    "\11\11\1\316\22\11\12\0\2\11\2\0\1\11\5\0"+
    "\1\11\3\0\26\11\1\317\5\11\12\0\2\11\2\0"+
    "\1\11\5\0\1\11\3\0\17\11\1\320\14\11\12\0"+
    "\2\11\2\0\1\11\5\0\1\11\3\0\14\11\1\321"+
    "\17\11\12\0\2\11\2\0\1\11\5\0\1\11\3\0"+
    "\11\11\1\322\22\11\12\0\2\11\2\0\1\11\5\0"+
    "\1\11\3\0\22\11\1\323\11\11\12\0\2\11\2\0"+
    "\1\11\5\0\1\11\3\0\7\11\1\324\24\11\12\0"+
    "\2\11\2\0\1\11\5\0\1\11\3\0\20\11\1\325"+
    "\13\11\12\0\2\11\2\0\1\11\5\0\1\11\3\0"+
    "\13\11\1\326\20\11\12\0\2\11\2\0\1\11\5\0"+
    "\1\11\3\0\2\11\1\327\31\11\12\0\2\11\2\0"+
    "\1\11\5\0\1\11\3\0\20\11\1\330\13\11\12\0"+
    "\2\11\2\0\1\11\5\0\1\11\3\0\6\11\1\331"+
    "\25\11\12\0\2\11\2\0\1\11\5\0\1\11\3\0"+
    "\24\11\1\332\7\11\12\0\2\11\2\0\1\11\5\0"+
    "\1\11\3\0\12\11\1\333\4\11\1\334\14\11\12\0"+
    "\2\11\2\0\1\11\5\0\1\11\3\0\7\11\1\335"+
    "\24\11\12\0\2\11\2\0\1\11\5\0\1\11\3\0"+
    "\5\11\1\336\26\11\12\0\2\11\2\0\1\11\5\0"+
    "\1\11\3\0\13\11\1\337\20\11\12\0\2\11\2\0"+
    "\1\11\5\0\1\11\3\0\13\11\1\340\20\11\12\0"+
    "\2\11\2\0\1\11\5\0\1\11\3\0\5\11\1\341"+
    "\26\11\12\0\2\11\2\0\1\11\5\0\1\11\3\0"+
    "\25\11\1\342\6\11\12\0\2\11\2\0\1\11\5\0"+
    "\1\11\3\0\5\11\1\343\26\11\12\0\2\11\2\0"+
    "\1\11\5\0\1\11\3\0\5\11\1\344\26\11\12\0"+
    "\2\11\2\0\1\11\5\0\1\11\3\0\14\11\1\345"+
    "\17\11\12\0\2\11\2\0\1\11\5\0\1\11\3\0"+
    "\2\11\1\346\31\11\12\0\2\11\2\0\1\11\5\0"+
    "\1\11\3\0\24\11\1\347\7\11\12\0\2\11\2\0"+
    "\1\11\5\0\1\11\3\0\2\11\1\350\31\11\12\0"+
    "\2\11\2\0\1\11\5\0\1\11\3\0\6\11\1\351"+
    "\25\11\12\0\2\11\2\0\1\11\5\0\1\11\3\0"+
    "\6\11\1\352\25\11\12\0\2\11\2\0\1\11\5\0"+
    "\1\11\3\0\5\11\1\353\26\11\12\0\2\11\2\0"+
    "\1\11\5\0\1\11\3\0\11\11\1\354\22\11\12\0"+
    "\2\11\2\0\1\11\5\0\1\11\3\0\24\11\1\355"+
    "\7\11\12\0\2\11\2\0\1\11\5\0\1\11\3\0"+
    "\24\11\1\356\7\11\12\0\2\11\2\0\1\11\5\0"+
    "\1\11\3\0\17\11\1\357\14\11\12\0\2\11\2\0"+
    "\1\11\5\0\1\11\3\0\21\11\1\360\12\11\12\0"+
    "\2\11\2\0\1\11\5\0\1\11\3\0\5\11\1\361"+
    "\26\11\12\0\2\11\2\0\1\11\5\0\1\11\3\0"+
    "\2\11\1\362\31\11\12\0\2\11\2\0\1\11\5\0"+
    "\1\11\3\0\13\11\1\363\20\11\12\0\2\11\2\0"+
    "\1\11\5\0\1\11\3\0\2\11\1\364\31\11\12\0"+
    "\2\11\2\0\1\11\5\0\1\11\3\0\6\11\1\365"+
    "\25\11\12\0\2\11\2\0\1\11\5\0\1\11\3\0"+
    "\6\11\1\366\25\11\12\0\2\11\2\0\1\11\5\0"+
    "\1\11\3\0\13\11\1\367\20\11\12\0\2\11\2\0"+
    "\1\11\5\0\1\11\3\0\15\11\1\370\16\11\12\0"+
    "\2\11\2\0\1\11\5\0\1\11\3\0\6\11\1\371"+
    "\25\11\12\0\2\11\2\0\1\11\5\0\1\11\3\0"+
    "\13\11\1\372\20\11\12\0\2\11\2\0\1\11\5\0"+
    "\1\11\3\0\12\11\1\373\21\11\12\0\2\11\2\0"+
    "\1\11\5\0\1\11\3\0\6\11\1\374\25\11\12\0"+
    "\2\11\2\0\1\11\5\0\1\11\3\0\12\11\1\375"+
    "\21\11\12\0\2\11\2\0\1\11\5\0\1\11\3\0"+
    "\7\11\1\376\24\11\12\0\2\11\2\0\1\11\5\0"+
    "\1\11\3\0\13\11\1\377\20\11\12\0\2\11\2\0"+
    "\1\11\5\0\1\11\3\0\10\11\1\u0100\23\11\12\0"+
    "\2\11\2\0\1\11\5\0\1\11\3\0\12\11\1\u0101"+
    "\21\11\12\0\2\11\2\0\1\11\5\0\1\11\3\0"+
    "\7\11\1\u0102\24\11\12\0\2\11\2\0\1\11\5\0"+
    "\1\11\3\0\5\11\1\u0103\26\11\12\0\2\11\2\0"+
    "\1\11\5\0\1\11\3\0\12\11\1\u0104\21\11\12\0"+
    "\2\11\2\0\1\11\5\0\1\11\3\0\2\11\1\u0105"+
    "\31\11\12\0\2\11\2\0\1\11\5\0\1\11\3\0"+
    "\2\11\1\u0106\31\11\12\0\2\11\2\0\1\11\5\0"+
    "\1\11\3\0\6\11\1\u0107\25\11\12\0\2\11\2\0"+
    "\1\11\5\0\1\11\3\0\17\11\1\u0108\14\11\12\0"+
    "\2\11\2\0\1\11\5\0\1\11\3\0\6\11\1\u0109"+
    "\25\11\12\0\2\11\2\0\1\11\5\0\1\11\3\0"+
    "\14\11\1\u010a\17\11\12\0\2\11\2\0\1\11\5\0"+
    "\1\11\3\0\15\11\1\u010b\16\11\12\0\2\11\2\0"+
    "\1\11\5\0\1\11\3\0\10\11\1\u010c\23\11\12\0"+
    "\2\11\2\0\1\11\5\0\1\11\3\0\6\11\1\u010d"+
    "\25\11\12\0\2\11\2\0\1\11\5\0\1\11\3\0"+
    "\13\11\1\u010e\20\11\12\0\2\11\2\0\1\11\5\0"+
    "\1\11\3\0\14\11\1\u010f\17\11\12\0\2\11\2\0"+
    "\1\11\5\0\1\11\3\0\13\11\1\u0110\20\11\12\0"+
    "\2\11\2\0\1\11\5\0\1\11\3\0\2\11\1\u0111"+
    "\31\11\12\0\2\11\2\0\1\11\5\0\1\11\3\0"+
    "\12\11\1\u0112\21\11\12\0\2\11\2\0\1\11\5\0"+
    "\1\11\3\0\13\11\1\u0113\20\11\12\0\2\11\2\0"+
    "\1\11\5\0\1\11\3\0\2\11\1\u0114\31\11\12\0"+
    "\2\11\2\0\1\11\5\0\1\11\3\0\13\11\1\u0115"+
    "\20\11\12\0\2\11\2\0\1\11\5\0\1\11\3\0"+
    "\7\11\1\u0116\24\11\12\0\2\11\2\0\1\11\5\0"+
    "\1\11\3\0\6\11\1\u0117\25\11\12\0\2\11\2\0"+
    "\1\11\5\0\1\11\3\0\13\11\1\u0118\20\11\12\0"+
    "\2\11\2\0\1\11\5\0\1\11\3\0\14\11\1\u0119"+
    "\17\11\12\0\2\11\2\0\1\11\5\0\1\11\3\0"+
    "\11\11\1\u011a\22\11\12\0\2\11\2\0\1\11\5\0"+
    "\1\11\3\0\13\11\1\u011b\20\11\12\0\2\11\2\0"+
    "\1\11\5\0\1\11\3\0\27\11\1\u011c\4\11\12\0"+
    "\2\11\2\0\1\11\5\0\1\11\3\0\13\11\1\u011d"+
    "\20\11\12\0\2\11\2\0\1\11\5\0\1\11\3\0"+
    "\10\11\1\u011e\23\11\12\0\2\11\2\0\1\11\5\0"+
    "\1\11\3\0\4\11\1\u011f\27\11\12\0\2\11\2\0"+
    "\1\11\5\0\1\11\3\0\5\11\1\u0120\26\11\12\0"+
    "\2\11\2\0\1\11\5\0\1\11\3\0\7\11\1\u0121"+
    "\24\11\12\0\2\11\2\0\1\11\5\0\1\11\3\0"+
    "\6\11\1\u0122\25\11\12\0\2\11\2\0\1\11\5\0"+
    "\1\11\3\0\6\11\1\u0123\25\11\12\0\2\11\2\0"+
    "\1\11\5\0\1\11\3\0\13\11\1\u0124\20\11\12\0"+
    "\2\11\2\0\1\11\5\0\1\11\3\0\4\11\1\u0125"+
    "\27\11\12\0\2\11\2\0\1\11\5\0\1\11\3\0"+
    "\5\11\1\u0126\26\11\12\0\2\11\2\0\1\11\5\0"+
    "\1\11\3\0\7\11\1\u0127\24\11\12\0\2\11\2\0"+
    "\1\11\5\0\1\11\3\0\13\11\1\u0128\20\11\12\0"+
    "\2\11\2\0\1\11\5\0\1\11\3\0\7\11\1\u0129"+
    "\24\11\12\0\2\11\2\0\1\11\5\0\1\11\3\0"+
    "\13\11\1\u012a\20\11\12\0\2\11\2\0\1\11\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10868];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\1\1\1\11\30\1\1\11"+
    "\2\1\1\11\1\1\1\11\1\1\2\11\2\1\2\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\1\1\1\0"+
    "\62\1\3\11\2\1\1\0\4\11\271\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[298];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    StringBuffer string = new StringBuffer();
    ComplexSymbolFactory symbolFactory;
    public Lexer(java.io.Reader in, ComplexSymbolFactory sf){
        this(in);
        symbolFactory = sf;
    }
    

    private Symbol symbol(String name, int sym){
        return symbolFactory.newSymbol(name,sym,new Location(yyline+1,yycolumn+1,yychar), new Location(yyline+1,yycolumn+yylength(),yychar+yylength()));
    }

    private Symbol symbol(String name, int sym, Object val){
        Location left = new Location(yyline+1,yycolumn+1,yychar);
        Location right = new Location(yyline+1,yycolumn+yylength(),yychar+yylength());
        return symbolFactory.newSymbol(name,sym,left,right,val);

    }

    private Symbol symbol(String name, int sym, Object val, int buflength){
        Location left = new Location(yyline+1,yycolumn+yylength()-buflength, yychar+yylength()-buflength);
        Location right = new Location(yyline+1,yycolumn+yylength(), yychar+yylength());
        return symbolFactory.newSymbol(name,sym,left,right,val);
    }

    private void error(String message){

        System.out.println("Error at line "+(yyline+1)+", column "+(yycolumn+1)+" : "+message);
    }


    StringBuffer comment = new StringBuffer();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 180) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbolFactory.newSymbol("EOF", EOF, new Location(yyline+1,yycolumn+1,yychar), new Location(yyline+1,yycolumn+1,yychar+1));
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.print("Unexpected token: "+ yytext());
            }
          case 93: break;
          case 2: 
            { return symbol("NUM",NUM);
            }
          case 94: break;
          case 3: 
            { /* ignore */
            }
          case 95: break;
          case 4: 
            { 
            }
          case 96: break;
          case 5: 
            { return symbol("IDENTIFIER",IDENTIFIER);
            }
          case 97: break;
          case 6: 
            { return symbol("OPREL",OPREL);
            }
          case 98: break;
          case 7: 
            { return symbol("MULDIV",MULDIV);
            }
          case 99: break;
          case 8: 
            { return symbol("SUMSUBS",SUMSUBS);
            }
          case 100: break;
          case 9: 
            { return symbol("LPAR",LPAR);
            }
          case 101: break;
          case 10: 
            { return symbol("RPAR",RPAR);
            }
          case 102: break;
          case 11: 
            { return symbol("SEMICOLON",SEMICOLON);
            }
          case 103: break;
          case 12: 
            { return symbol("COMMA",COMMA);
            }
          case 104: break;
          case 13: 
            { string.setLength(0); yybegin(STRING);
            }
          case 105: break;
          case 14: 
            { string.append( yytext() );
            }
          case 106: break;
          case 15: 
            { yybegin(YYINITIAL);
            }
          case 107: break;
          case 16: 
            { string.append('\\');
            }
          case 108: break;
          case 17: 
            { comment.append( yytext() );
            }
          case 109: break;
          case 18: 
            { return symbol("AT",AT);
            }
          case 110: break;
          case 19: 
            { return symbol("OR",OR);
            }
          case 111: break;
          case 20: 
            { return symbol("OF",OF);
            }
          case 112: break;
          case 21: 
            { return symbol("DO",DO);
            }
          case 113: break;
          case 22: 
            { return symbol("IN",IN);
            }
          case 114: break;
          case 23: 
            { return symbol("IS",IS);
            }
          case 115: break;
          case 24: 
            { return symbol("IF",IF);
            }
          case 116: break;
          case 25: 
            { return symbol("ASSIGN",ASSIGN);
            }
          case 117: break;
          case 26: 
            { comment.setLength(0); yybegin(COMMENTS);
            }
          case 118: break;
          case 27: 
            { return symbol("DOTDOT",DOTDOT);
            }
          case 119: break;
          case 28: 
            { string.append('\r');
            }
          case 120: break;
          case 29: 
            { string.append('\t');
            }
          case 121: break;
          case 30: 
            { string.append('\n');
            }
          case 122: break;
          case 31: 
            { string.append('\"');
            }
          case 123: break;
          case 32: 
            { return symbol("REAL",REAL);
            }
          case 124: break;
          case 33: 
            { return symbol("ABS",ABS);
            }
          case 125: break;
          case 34: 
            { return symbol("AND",AND);
            }
          case 126: break;
          case 35: 
            { return symbol("ALL",ALL);
            }
          case 127: break;
          case 36: 
            { return symbol("OUT",OUT);
            }
          case 128: break;
          case 37: 
            { return symbol("REM",REM);
            }
          case 129: break;
          case 38: 
            { return symbol("NOT",NOT);
            }
          case 130: break;
          case 39: 
            { return symbol("NEW",NEW);
            }
          case 131: break;
          case 40: 
            { return symbol("END",END);
            }
          case 132: break;
          case 41: 
            { return symbol("XOR",XOR);
            }
          case 133: break;
          case 42: 
            { return symbol("FOR",FOR);
            }
          case 134: break;
          case 43: 
            { return symbol("MOD",MOD);
            }
          case 135: break;
          case 44: 
            { return symbol("USE",USE);
            }
          case 136: break;
          case 45: 
            { return symbol("GET",GET);
            }
          case 137: break;
          case 46: 
            { return symbol("PUT",PUT);
            }
          case 138: break;
          case 47: 
            { return symbol("BODY",BODY);
            }
          case 139: break;
          case 48: 
            { return symbol("TASK",TASK);
            }
          case 140: break;
          case 49: 
            { return symbol("THEN",SELECT);
            }
          case 141: break;
          case 50: 
            { return symbol("TYPE",TYPE);
            }
          case 142: break;
          case 51: 
            { return symbol("NULL",NULL);
            }
          case 143: break;
          case 52: 
            { return symbol("CASE",CASE);
            }
          case 144: break;
          case 53: 
            { return symbol("EXIT",EXIT);
            }
          case 145: break;
          case 54: 
            { return symbol("ELSE",ELSE);
            }
          case 146: break;
          case 55: 
            { return symbol("GOTO",GOTO);
            }
          case 147: break;
          case 56: 
            { return symbol("LOOP",LOOP);
            }
          case 148: break;
          case 57: 
            { return symbol("WITH",SELECT);
            }
          case 149: break;
          case 58: 
            { return symbol("WHEN",WHEN);
            }
          case 150: break;
          case 59: 
            { return symbol("ABORT",ABORT);
            }
          case 151: break;
          case 60: 
            { return symbol("ARRAY",ARRAY);
            }
          case 152: break;
          case 61: 
            { return symbol("BEGIN",BEGIN);
            }
          case 153: break;
          case 62: 
            { return symbol("RANGE",RANGE);
            }
          case 154: break;
          case 63: 
            { return symbol("RAISE",RAISE);
            }
          case 155: break;
          case 64: 
            { return symbol("DELAY",DELAY);
            }
          case 156: break;
          case 65: 
            { return symbol("DELTA",DELTA);
            }
          case 157: break;
          case 66: 
            { return symbol("ENTRY",ENTRY);
            }
          case 158: break;
          case 67: 
            { return symbol("ELSIF",ELSIF);
            }
          case 159: break;
          case 68: 
            { return symbol("WHILE",WHILE);
            }
          case 160: break;
          case 69: 
            { return symbol("FLOAT",FLOAT);
            }
          case 161: break;
          case 70: 
            { return symbol("ACCESS",ACCESS);
            }
          case 162: break;
          case 71: 
            { return symbol("ACCEPT",ACCEPT);
            }
          case 163: break;
          case 72: 
            { return symbol("OTHERS",OTHERS);
            }
          case 164: break;
          case 73: 
            { return symbol("RETURN",RETURN);
            }
          case 165: break;
          case 74: 
            { return symbol("RECORD",RECORD);
            }
          case 166: break;
          case 75: 
            { return symbol("DIGITS",DIGITS);
            }
          case 167: break;
          case 76: 
            { return symbol("SELECT",SELECT);
            }
          case 168: break;
          case 77: 
            { return symbol("RENAMES",RENAMES);
            }
          case 169: break;
          case 78: 
            { return symbol("REVERSE",REVERSE);
            }
          case 170: break;
          case 79: 
            { return symbol("DECLARE",DECLARE);
            }
          case 171: break;
          case 80: 
            { return symbol("SUBTYPE",SUBTYPE);
            }
          case 172: break;
          case 81: 
            { return symbol("GENERIC",GENERIC);
            }
          case 173: break;
          case 82: 
            { return symbol("PACKAGE",PACKAGE);
            }
          case 174: break;
          case 83: 
            { return symbol("PRIVATE",PRIVATE);
            }
          case 175: break;
          case 84: 
            { return symbol("LIMITED",LIMITED);
            }
          case 176: break;
          case 85: 
            { return symbol("INTEGER",INTEGER);
            }
          case 177: break;
          case 86: 
            { return symbol("BOOLEAN",BOOLEAN);
            }
          case 178: break;
          case 87: 
            { return symbol("CONSTANT",CONSTANT);
            }
          case 179: break;
          case 88: 
            { return symbol("SEPARATE",SEPARATE);
            }
          case 180: break;
          case 89: 
            { return symbol("FUNCTION",FUNCTION);
            }
          case 181: break;
          case 90: 
            { return symbol("TERMINATE",TERMINATE);
            }
          case 182: break;
          case 91: 
            { return symbol("EXCEPTION",EXCEPTION);
            }
          case 183: break;
          case 92: 
            { return symbol("PROCEDURE",PROCEDURE);
            }
          case 184: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
